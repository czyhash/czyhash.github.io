<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js 学习笔记</title>
      <link href="/posts/20e30b1b.html"/>
      <url>/posts/20e30b1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><pre><code>console.log(&#39;Hello world&#39;);</code></pre><p>console.log与c语言中的printf功能类似,也接受任意多个参数,支持%d,%s变量引用:</p><pre><code>console.log(&#39;%s:%d&#39;,&#39;Hello&#39;,25);Hello:25</code></pre><p>运行无参数的 node 将会启动一个 JavaScript 的交互式 shell</p><pre><code>$ node&gt; console.log(&#39;Hello World&#39;);Hello Worldundefined</code></pre><p>在任何时候，连续按两次 Ctrl + C 即可退出Node.js 的 REPL 模式。</p><hr><h2 id="建立HTTP服务器"><a href="#建立HTTP服务器" class="headerlink" title="建立HTTP服务器"></a>建立HTTP服务器</h2><p>首先创建一个名为app.js的文件:</p><pre><code>//app.jsvar http = require(&#39;http&#39;);http.createServer(function(req, res) &#123;  res.writeHead(200, &#123;&#39;Content-Type&#39;: &#39;text/html&#39;&#125;);  res.write(&#39;&lt;h1&gt;Node.js&lt;/h1&gt;&#39;);  res.end(&#39;&lt;p&gt;Hello World&lt;/p&gt;&#39;);&#125;).listen(3000);console.log(&quot;HTTP server is listening at port 3000.&quot;);</code></pre><p>接下来运行 node app.js命令，打开浏览器访问 <a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a></p><blockquote><p><h1>Node.js</h1><br>  <h3>Hello World</h3></p></blockquote><p>这个程序调用了 Node.js 提供的 http 模块，对所有 HTTP 请求答复同样的内容并监听 3000 端口.</p><p><strong>Node.js</strong> <strong>教程</strong></p><p><strong>Node.js</strong></p><p>Node.js 是能够在伺服器端运行 JavaScript 的开放原始码、跨平台 JavaScript 执行环境。</p><p>Node.js 由 Node.js 基金会持有和维护 ，并与 Linux 基金会有合作关系 。</p><p>Node.js 采用 Google 开发的 V8 执行程式码，使用事件驱动、非阻塞和非同步输入输出模型等技术来提高效能，可优化应用程式的传输量和规模。</p><p>这些技术通常用于资料密集的即时应用程式。</p><p>一句话概括就是：JS 非常牛 X！</p><p>我个人的理解比较简单：PHP 是 WEB 开发的过去式，Node.js 是 WEB 开发的将来时！</p><p><strong>一切能用 JS 来做的事情，最终都会用 JS 来做！</strong></p><p>尽力推动 JS 生态，包括并不限网页开发，Chrome 扩展开发，PC 桌面应用的开发，手机端应用的开发，服务器任务批处理脚本等等；</p><p><strong>Node.js</strong> <strong>对前端生态的推动有里程碑的意义</strong></p><p>Node.js 大部分基本模组都用 JavaScript 语言编写。</p><p>在 Node.js 出现之前，JavaScript 通常作为用户端程式设计语言使用，以 JavaScript 写出的程式常在用户的浏览器上执行。</p><p>Node.js 的出现使 JavaScript 也能用于伺服器端编程。</p><p>Node.js 含有一系列内置模组，使得程式可以脱离 Apache HTTP Server 或 IIS，作为独立伺服器执行。</p><p><strong>使用的版本</strong></p><p>我们可以使用以下命令来查看当前的 Node 版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. node -v</span><br><span class="line"></span><br><span class="line">2. npm -v</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>不同版本间可能是有差异的。</p><p><strong>Hello World**</strong>！**</p><p><strong>脚本模式</strong></p><p>以下是我们的第一个 Node.js 程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. console.log(&quot;Hello World&quot;);</span><br></pre></td></tr></table></figure><p>保存该文件，文件名为 helloworld.js， 并通过 node 命令来执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. node helloworld.js</span><br></pre></td></tr></table></figure><p>程序执行后，正常的话，就会在终端输出 Hello World。</p><p><strong>交互模式</strong></p><p>打开终端，键入 node 进入命令交互模式，可以输入一条代码语句后立即执行并显示结果，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node&gt; console.log(&#x27;Hello World!&#x27;);Hello World!</span><br></pre></td></tr></table></figure><p><strong>执行绪</strong></p><p>Node.js 以单执行绪执行，使用非阻塞 I/O 呼叫，这样既可以支援数以万计的并行连线，又不会因多执行绪本身的特点而带来麻烦。</p><p>众多请求只使用单执行绪的设计意味著可以用于建立高并行应用程式。Node.js 应用程式的设计目标是任何需要操作 I/O 的函式都使用回呼函式。</p><p>这种设计的缺点是，如果不使用 cluster、StrongLoop Process Manager 或 pm2 等模组，Node.js 就难以处理多核或多执行绪等情况。</p><p><strong>V8</strong></p><p>主条目：V8 (JavaScript 引擎）</p><p>V8 是为 Google Chrome 设计的 JavaScript 运行引擎，Google 于 2008 年将其开源。V8 用 C++ 写成，它将 JavaScript 源代码编译成本地机器码而不是解释执行。</p><p>Node.js 用 libuv 来处理异步事件，而 V8 提供了 JavaScript 的实时运行环境。</p><p>libuv 是一个网络和文件系统功能的抽象层，既可以用于 Windows 又可以用于符合 POSIX 标准的系统，例如 Linux、OS X 和 Unix。</p><p>Node.js 的核心功能被包含进一个 JavaScript 库，并通过 C++ 将各部分与操作系统进行联系。</p><p><strong>npm</strong></p><p>主条目：node 包管理器</p><p>npm 是 Node.js 附带的包管理器。</p><p>npm 是一个命令行工具，用于从 NPM Registry 中下载、安装 Node.js 程序，同时解决依赖问题。</p><p>npm 提高了开发的速度，因为它能够负责第三方 Node.js 程序的安装与管理。</p><p><strong>统一 API</strong></p><p>Node.js 将浏览器、数据（例如 MongoDB 或 CouchDB）等组合到一起，通过 JSON 提供一个统一的接口。</p><p>由于前端框架和一些基本的后端开发技术（如 MVC、MVP、MVVM 等）变得流行，</p><p>Node.js 也支持客户端和服务器端重新利用相同的模型和接口。</p><p><strong>事件循环</strong></p><p>Node.js 将其注册到操作系统中，这样可以及时注意到新连接的产生。当新连接产生时，操作系统会产生一个回调。</p><p>在 Node.js 运行时内部，每个连接都被分配一个小型的堆。</p><p>与其他服务器程序不同的是，Node.js 不使用进程或线程处理连接，而是采用事件循环来处理并发连接。</p><p>而且 Node.js 的事件循环不需要手动调用。</p><p>在回调函数定义之后，服务器进入事件循环。</p><p>当回调函数均被执行完毕之后，Node.js 结束事件循环。</p><p><strong>开发工具</strong></p><p><strong>桌面</strong> <strong>IDE</strong></p><ul><li>Atom（免费、开源软件）</li><li>Brackets（免费、开源软件）</li><li>Sublime Text（商业软件）</li><li>JetBrains IntelliJ IDEA（商业软件）</li><li><strong>JetBrains WebStorm**</strong>（商业软件，五星推荐）**</li><li>Microsoft Visual Studio with     Node.js Tools for Visual Studio（商业软件）</li><li>Microsoft Visual Studio with     TypeScript（商业软件）</li><li>Nodeclipse Enide Studio（免费、开源软件、在 Eclipse 基础上开发）</li><li>NoFlo –与 GNOME API 集成的流式开发环境</li><li>Visual Studio Code（免费、开源软件）</li></ul><p><strong>在线编辑器</strong></p><ul><li>Koding</li><li>Codenvy IDE</li><li>Cloud9 IDE</li><li>Codiad</li></ul><p><strong>运行时和调试器</strong></p><ul><li><strong>Visual Studio     Code</strong> <strong>（五星推荐）</strong></li><li>Microsoft Visual Studio（商业）with Node.js Tools for     Visual Studio（免费）</li><li>Microsoft WebMatrix（免费、闭源软件）</li></ul><p><strong>框架</strong></p><ul><li>服务器端框架：Express.js, Socket.IO,     Koa.js, Hapi.js, Total.js</li><li>MVC 框架：Meteor, Derby, Sails, Mean, MeanJS,     Tower.js, Nombo, Geddy, Compound, Yahoo! Mojito</li></ul><p><strong>下载</strong></p><p><strong>Node.js</strong> <strong>下载地址</strong></p><p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><strong>Node.js</strong> <strong>历史版本</strong></p><p>Node.js 历史版本下载地址：<a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a></p><p><strong>这里是 Nodejs 历史版本大全</strong></p><p><strong>Windows Node.js</strong> <strong>安装</strong></p><p><strong>Node.js</strong> <strong>安装配置</strong></p><p>本章节我们将向大家介绍在 Windows 上安装 Node.js 的方法。</p><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/。">https://nodejs.org/en/download/。</a></p><p><img src="C:\Users\86133\Pictures\node.jpg" alt="nodejs_download"></p><p>你可以根据不同平台系统选择你需要的 Node.js 安装包。</p><p><strong>Windows</strong> <strong>上安装 Node.js</strong></p><p>你可以采用以下两种方式来安装。</p><p><strong>1**</strong>、<strong>**Windows</strong> <strong>安装包</strong> <strong>(.msi)</strong></p><p>本文实例以 v10.xx.xx 版本为例，其他版本类似， 安装步骤：</p><p><strong>步骤</strong> <strong>1 :</strong> <strong>双击下载后的安装包</strong> <strong>v10.xx.xx**</strong>，如下所示：**</p><p><img src="C:\Users\86133\Pictures\node1.jpg" alt="install-node-msi-version-on-windows-step1"></p><p><strong>步骤</strong> <strong>2 :</strong> <strong>点击以上的</strong> <strong>Run**</strong>（运行），将出现如下界面：**</p><p><img src="C:\Users\86133\Pictures\node.jpd" alt="install-node-msi-version-on-windows-step2"></p><p><strong>步骤</strong> <strong>3 :</strong> <strong>勾选接受协议选项，点击</strong> <strong>next**</strong>（下一步）<strong> </strong>按钮<strong> </strong>:**</p><p><img src="C:\Users\86133\Pictures\node3.jpg" alt="install-node-msi-version-on-windows-step3"></p><p><strong>步骤</strong> <strong>4 :</strong> <strong>选择</strong> <strong>Node.js</strong> <strong>安装目录</strong></p><p>默认安装目录为 “C:\Program Files\nodejs\” , 你可以修改目录，并点击 next（下一步）：</p><p><strong>非常不推荐用户修改安装目录！！！使用默认的就好</strong></p><p><img src="C:\Users\86133\Pictures\node4.jpg" alt="install-node-msi-version-on-windows-step4"></p><p><strong>步骤</strong> <strong>5 :</strong> <strong>点击树形图标来选择你需要的安装模式</strong> <strong>,</strong> <strong>然后点击下一步</strong> <strong>next**</strong>（下一步）**</p><p><img src="C:\Users\86133\Pictures\node5.jpg" alt="install-node-msi-version-on-windows-step5"></p><p><strong>步骤</strong> <strong>6 :</strong> <strong>点击</strong> <strong>Install**</strong>（安装）<strong> </strong>开始安装<strong> </strong>Node.js<strong>**。你也可以点击</strong> <strong>Back**</strong>（返回）来修改先前的配置。<strong> </strong>然后并点击<strong> </strong>next<strong>**（下一步）：</strong></p><p><img src="C:\Users\86133\Pictures\node6.jpg" alt="install-node-msi-version-on-windows-step6"></p><p>安装过程：</p><p><img src="C:\Users\86133\Pictures\node7.jpg" alt="install-node-msi-version-on-windows-step7"></p><p>点击 Finish（完成）按钮退出安装向导。</p><p><img src="C:\Users\86133\Pictures\node8.jpg" alt="install-node-msi-version-on-windows-step8"></p><p>检测 PATH 环境变量是否配置了 Node.js，点击开始 =》运行 =》输入”cmd” =&gt; 输入命令”path”，输出如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">1. PATH=C:\WINDOWS\system32;</span><br><span class="line"></span><br><span class="line">2. C:\WINDOWS;</span><br><span class="line"></span><br><span class="line">3. C:\WINDOWS\System32\Wbem;</span><br><span class="line"></span><br><span class="line">4. C:\WINDOWS\System32\WindowsPowerShell\v1.0\;</span><br><span class="line"></span><br><span class="line">5. C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;</span><br><span class="line"></span><br><span class="line">6. C:\WINDOWS\System32\OpenSSH\;</span><br><span class="line"></span><br><span class="line">7. E:\git\Git\cmd;</span><br><span class="line"></span><br><span class="line">8. E:\postgreSQL\install\pg11\bin;</span><br><span class="line"></span><br><span class="line">9. C:\Program Files\nodejs\;</span><br><span class="line"></span><br><span class="line">10. C:\Users\Administrator\.windows-build-tools\python27\;</span><br><span class="line"></span><br><span class="line">11. C:\Program Files\nodejs\node_modules\npm\node_modules\npm-lifecycle\node-gyp-bin;</span><br><span class="line"></span><br><span class="line">12. C:\Users\Administrator\AppData\Roaming\npm\node_modules\windows-build-tools\node_modules\.bin;</span><br><span class="line"></span><br><span class="line">13. C:\Users\Administrator\AppData\Roaming\npm\node_modules\.bin;</span><br><span class="line"></span><br><span class="line">14. C:\WINDOWS\system32;</span><br><span class="line"></span><br><span class="line">15. C:\WINDOWS;</span><br><span class="line"></span><br><span class="line">16. C:\WINDOWS\System32\Wbem;</span><br><span class="line"></span><br><span class="line">17. C:\WINDOWS\System32\WindowsPowerShell\v1.0\;</span><br><span class="line"></span><br><span class="line">18. C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;</span><br><span class="line"></span><br><span class="line">19. C:\WINDOWS\System32\OpenSSH\;</span><br><span class="line"></span><br><span class="line">20. C:\Program Files\nodejs\;</span><br><span class="line"></span><br><span class="line">21. E:\git\Git\cmd;</span><br><span class="line"></span><br><span class="line">22. E:\postgreSQL\install\pg11\bin;</span><br><span class="line"></span><br><span class="line">23. C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;</span><br><span class="line"></span><br><span class="line">24. E:\vscode\install\Microsoft VS Code\bin;</span><br><span class="line"></span><br><span class="line">25. C:\Users\Administrator\AppData\Roaming\npm;</span><br><span class="line"></span><br><span class="line">26. C:\Users\Administrator\AppData\Local\BypassRuntm;</span><br><span class="line"></span><br><span class="line">27. C:\Users\Administrator\AppData\Local\GitHubDesktop\bin</span><br><span class="line"></span><br><span class="line">我们可以看到环境变量中已经包含了 C:\Program Files\nodejs\;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检查 Node.js 版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. node -v</span><br><span class="line"></span><br><span class="line">2. npm -v</span><br></pre></td></tr></table></figure><p><strong>2**</strong>、<strong>**Windows</strong> <strong>二进制文件</strong> <strong>(.exe)</strong></p><p>使用 .exe 的安装包进行安装</p><p><strong>安装步骤</strong></p><p>步骤 1 : 双击下载的安装包 Node.exe ，将出现如下界面 :</p><p><img src="C:\Users\86133\Pictures\node9.jpg" alt="install-node-exe-on-windows-step1"></p><p>点击 Run（运行）按钮将出现命令行窗口：</p><p><img src="C:\Users\86133\Pictures\node10.jpg" alt="install-node-exe-on-windows-step21"></p><p><strong>测试 Node.js 是否安装成功</strong></p><p>进入 node.exe 所在的目录，</p><p>输出结果，说明你已经成功安装了 Node.js。</p><p><strong>Node.js</strong> <strong>创建第一个应用</strong></p><p>使用 Node.js 时做一个 WEB 服务的时候，我们不仅仅 在实现一个应用，同时还实现了整个 HTTP 服务器。</p><p>事实上，我们的 <strong>Web</strong> <strong>应用</strong> 以及对应的 <strong>Web</strong> <strong>服务器</strong> 基本上是一样的。</p><p>在我们创建 Node.js 第一个 “Hello, World!” 应用前，让我们先了解下 Node.js 应用是由哪几部分组成的：</p><ol><li>引入 required 模块：</li></ol><p>我们可以使用require</p><p>指令来载入 Node.js 模块。</p><ol><li>创建服务器：</li></ol><p>服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</p><ol><li><strong>接收请求与响应请求</strong> 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</li></ol><p><strong>创建 Node.js 应用</strong></p><p><strong>步骤一、引入</strong> <strong>required</strong> <strong>模块</strong></p><p>我们使用 <strong>require</strong> 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下：</p><p>\1. var http = require(“http”);</p><p><strong>步骤二、创建服务器</strong></p><p>接下来我们使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。</p><p>函数通过 request, response 参数来接收和响应数据。</p><p>实例如下，在你项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&#x27;http&#x27;);</span><br><span class="line"></span><br><span class="line">2. http.createServer(function (request, response) &#123;</span><br><span class="line"></span><br><span class="line">3.   // 发送 HTTP 头部</span><br><span class="line"></span><br><span class="line">4.   // HTTP 状态值: 200 : OK</span><br><span class="line"></span><br><span class="line">5.   // 内容类型: text/plain</span><br><span class="line"></span><br><span class="line">6.   response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">7.   // 发送响应数据 &quot;Hello World&quot;</span><br><span class="line"></span><br><span class="line">8.   response.end(&#x27;Hello World\n&#x27;);</span><br><span class="line"></span><br><span class="line">9. &#125;).listen(8888);</span><br><span class="line"></span><br><span class="line">10. // 终端打印如下信息</span><br><span class="line"></span><br><span class="line">11. console.log(&#x27;Server running at http://127.0.0.1:8888/&#x27;);</span><br><span class="line"></span><br><span class="line">以上代码我们完成了一个可以工作的 HTTP 服务器。</span><br></pre></td></tr></table></figure><p>使用 <strong>node</strong> 命令执行以上的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. node server.js</span><br><span class="line"></span><br><span class="line">2. Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure><p>接下来，打开浏览器访问 <a href="http://127.0.0.1:8888/，你会看到一个写着">http://127.0.0.1:8888/，你会看到一个写着</a> “Hello World”的网页。</p><p><strong>分析 Node.js 的 HTTP 服务器：</strong></p><ul><li><p>第一行请求（require）Node.js 自带的 http 模块，并且把它赋值给 http 变量。</p></li><li><p>接下来我们调用 http 模块提供的函数： createServer 。</p></li><li><ul><li>这个函数会返回 一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数， 指定这个 HTTP 服务器监听的端口号。</li></ul></li></ul><p><strong>NPM</strong> <strong>使用介绍</strong></p><p><strong>NPM</strong> <strong>使用介绍</strong></p><p>NPM 是随同 NodeJS 一起安装的包管理工具，能解决 NodeJS 代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从 NPM 服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从 NPM 服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到 NPM 服务器供别人使用。</li></ul><p>由于新版的 nodejs 已经集成了 npm，所以之前 npm 也一并安装好了。</p><p>同样可以通过输入 <strong>“npm -v”</strong> 来测试是否成功安装。命令如下，出现版本提示表示安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm -v6.4.1</span><br></pre></td></tr></table></figure><p>如果你安装的是旧版本的 npm，可以很容易得通过 npm 命令来升级，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. $ sudo npm install npm -g</span><br><span class="line"></span><br><span class="line">2. /usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js</span><br><span class="line"></span><br><span class="line">3. npm@6.6.2 /usr/local/lib/node_modules/npm</span><br></pre></td></tr></table></figure><p>如果是 Window 系统使用以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. npm install npm -g</span><br></pre></td></tr></table></figure><p><strong>使用淘宝镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>使用 npm 命令安装模块</strong></p><p>npm 安装 Node.js 模块语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm install</span><br></pre></td></tr></table></figure><p>以下实例，我们使用 npm 命令安装常用的 Node.js web 框架模块 <strong>express</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm install express</span><br></pre></td></tr></table></figure><p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 <strong>require(**</strong>‘express’)** 的方式就好，无需指定第三方包路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. var express = require(&#x27;express&#x27;);</span><br></pre></td></tr></table></figure><p><strong>全局安装与本地安装</strong></p><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有 -g 而已，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. npm install express      # 本地安装npm install express -g    # 全局安装</span><br></pre></td></tr></table></figure><p>如果出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. npm err! Error: connect ECONNREFUSED 127.0.0.1:8087</span><br></pre></td></tr></table></figure><p>解决办法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm config set proxy null</span><br></pre></td></tr></table></figure><p><strong>本地安装</strong></p><ul><li><ol><li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录）</li></ol></li><li><ul><li>如果没有      node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li></ul></li><li><ol><li>可以通过 require() 来引入本地安装的包。</li></ol></li></ul><p><strong>全局安装</strong></p><ul><li><ol><li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li></ol></li><li><ol><li>可以直接在命令行里使用。</li></ol></li></ul><p>如果你希望具备两者功能，则需要在两个地方安装它或使用 <a href="https://www.axihe.com/api/npm/cli/npm-link.html"><strong>npm link</strong></a> 。</p><p>接下来我们使用全局方式安装 express</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm install express -g</span><br></pre></td></tr></table></figure><p>安装过程输出如下内容，第一行输出了模块的版本号及安装位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1. express@4.13.3 node_modules/express</span><br><span class="line"></span><br><span class="line">2. ├── escape-html@1.0.2</span><br><span class="line"></span><br><span class="line">3. ├── range-parser@1.0.2</span><br><span class="line"></span><br><span class="line">4. ├── merge-descriptors@1.0.0</span><br><span class="line"></span><br><span class="line">5. ├── array-flatten@1.1.1</span><br><span class="line"></span><br><span class="line">6. ├── cookie@0.1.3</span><br><span class="line"></span><br><span class="line">7. ├── utils-merge@1.0.0</span><br><span class="line"></span><br><span class="line">8. ├── parseurl@1.3.0</span><br><span class="line"></span><br><span class="line">9. ├── cookie-signature@1.0.6</span><br><span class="line"></span><br><span class="line">10. ├── methods@1.1.1</span><br><span class="line"></span><br><span class="line">11. ├── fresh@0.3.0</span><br><span class="line"></span><br><span class="line">12. ├── vary@1.0.1</span><br><span class="line"></span><br><span class="line">13. ├── path-to-regexp@0.1.7</span><br><span class="line"></span><br><span class="line">14. ├── content-type@1.0.1</span><br><span class="line"></span><br><span class="line">15. ├── etag@1.7.0</span><br><span class="line"></span><br><span class="line">16. ├── serve-static@1.10.0</span><br><span class="line"></span><br><span class="line">17. ├── content-disposition@0.5.0</span><br><span class="line"></span><br><span class="line">18. ├── depd@1.0.1</span><br><span class="line"></span><br><span class="line">19. ├── qs@4.0.0</span><br><span class="line"></span><br><span class="line">20. ├── finalhandler@0.4.0 (unpipe@1.0.0)</span><br><span class="line"></span><br><span class="line">21. ├── on-finished@2.3.0 (ee-first@1.1.1)</span><br><span class="line"></span><br><span class="line">22. ├── proxy-addr@1.0.8 (forwarded@0.1.0, ipaddr.js@1.0.1)</span><br><span class="line"></span><br><span class="line">23. ├── debug@2.2.0 (ms@0.7.1)</span><br><span class="line"></span><br><span class="line">24. ├── type-is@1.6.8 (media-typer@0.3.0, mime-types@2.1.6)</span><br><span class="line"></span><br><span class="line">25. ├── accepts@1.2.12 (negotiator@0.5.3, mime-types@2.1.6)</span><br><span class="line"></span><br><span class="line">26. └── send@0.13.0 (destroy@1.0.3, statuses@1.2.1, ms@0.7.1, mime@1.3.4, http-errors@1.3.1)</span><br></pre></td></tr></table></figure><p><strong>查看安装信息</strong></p><p>你可以使用 <strong>npm ls</strong> 命令来查看所有全局安装的模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm ls -g</span><br><span class="line"></span><br><span class="line">2. ├─┬ cnpm@4.3.2</span><br><span class="line"></span><br><span class="line">3. │ ├── auto-correct@1.0.0</span><br><span class="line"></span><br><span class="line">4. │ ├── bagpipe@0.3.5</span><br><span class="line"></span><br><span class="line">5. │ ├── colors@1.1.2</span><br><span class="line"></span><br><span class="line">6. │ ├─┬ commander@2.9.0</span><br><span class="line"></span><br><span class="line">7. │ │ └── graceful-readlink@1.0.1</span><br><span class="line"></span><br><span class="line">8. │ ├─┬ cross-spawn@0.2.9</span><br><span class="line"></span><br><span class="line">9. │ │ └── lru-cache@2.7.3</span><br><span class="line"></span><br><span class="line">10. ……</span><br></pre></td></tr></table></figure><p>如果要查看某个模块的版本号，可以使用命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm ls grunt</span><br><span class="line"></span><br><span class="line">2. projectName@projectVersion /path/to/project/folder</span><br><span class="line"></span><br><span class="line">3. └── grunt@0.4.1</span><br></pre></td></tr></table></figure><p><strong>使用 package.json</strong></p><p>package.json 位于模块的目录下，用于定义包的属性。</p><p>接下来让我们来看下 express 包的 package.json 文件，位于 node_modules/express/package.json 内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br></pre></td><td class="code"><pre><span class="line">1. &#123;</span><br><span class="line"></span><br><span class="line">2.  &quot;name&quot;: &quot;express&quot;,</span><br><span class="line"></span><br><span class="line">3.  &quot;description&quot;: &quot;Fast, unopinionated, minimalist web framework&quot;,</span><br><span class="line"></span><br><span class="line">4.  &quot;version&quot;: &quot;4.13.3&quot;,</span><br><span class="line"></span><br><span class="line">5.  &quot;author&quot;: &#123;</span><br><span class="line"></span><br><span class="line">6.   &quot;name&quot;: &quot;TJ Holowaychuk&quot;,</span><br><span class="line"></span><br><span class="line">7.   &quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class="line"></span><br><span class="line">8.  &#125;,</span><br><span class="line"></span><br><span class="line">9.  &quot;contributors&quot;: [</span><br><span class="line"></span><br><span class="line">10.   &#123;</span><br><span class="line"></span><br><span class="line">11.    &quot;name&quot;: &quot;Aaron Heckmann&quot;,</span><br><span class="line"></span><br><span class="line">12.    &quot;email&quot;: &quot;aaron.heckmann+github@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">13.   &#125;,</span><br><span class="line"></span><br><span class="line">14.   &#123;</span><br><span class="line"></span><br><span class="line">15.    &quot;name&quot;: &quot;Ciaran Jessup&quot;,</span><br><span class="line"></span><br><span class="line">16.    &quot;email&quot;: &quot;ciaranj@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">17.   &#125;,</span><br><span class="line"></span><br><span class="line">18.   &#123;</span><br><span class="line"></span><br><span class="line">19.    &quot;name&quot;: &quot;Douglas Christopher Wilson&quot;,</span><br><span class="line"></span><br><span class="line">20.    &quot;email&quot;: &quot;doug@somethingdoug.com&quot;</span><br><span class="line"></span><br><span class="line">21.   &#125;,</span><br><span class="line"></span><br><span class="line">22.   &#123;</span><br><span class="line"></span><br><span class="line">23.    &quot;name&quot;: &quot;Guillermo Rauch&quot;,</span><br><span class="line"></span><br><span class="line">24.    &quot;email&quot;: &quot;rauchg@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">25.   &#125;,</span><br><span class="line"></span><br><span class="line">26.   &#123;</span><br><span class="line"></span><br><span class="line">27.    &quot;name&quot;: &quot;Jonathan Ong&quot;,</span><br><span class="line"></span><br><span class="line">28.    &quot;email&quot;: &quot;me@jongleberry.com&quot;</span><br><span class="line"></span><br><span class="line">29.   &#125;,</span><br><span class="line"></span><br><span class="line">30.   &#123;</span><br><span class="line"></span><br><span class="line">31.    &quot;name&quot;: &quot;Roman Shtylman&quot;,</span><br><span class="line"></span><br><span class="line">32.    &quot;email&quot;: &quot;shtylman+expressjs@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">33.   &#125;,</span><br><span class="line"></span><br><span class="line">34.   &#123;</span><br><span class="line"></span><br><span class="line">35.    &quot;name&quot;: &quot;Young Jae Sim&quot;,</span><br><span class="line"></span><br><span class="line">36.    &quot;email&quot;: &quot;hanul@hanul.me&quot;</span><br><span class="line"></span><br><span class="line">37.   &#125;</span><br><span class="line"></span><br><span class="line">38.  ],</span><br><span class="line"></span><br><span class="line">39.  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line"></span><br><span class="line">40.  &quot;repository&quot;: &#123;</span><br><span class="line"></span><br><span class="line">41.   &quot;type&quot;: &quot;git&quot;,</span><br><span class="line"></span><br><span class="line">42.   &quot;url&quot;: &quot;git+https://github.com/strongloop/express.git&quot;</span><br><span class="line"></span><br><span class="line">43.  &#125;,</span><br><span class="line"></span><br><span class="line">44.  &quot;homepage&quot;: &quot;http://expressjs.com/&quot;,</span><br><span class="line"></span><br><span class="line">45.  &quot;keywords&quot;: [</span><br><span class="line"></span><br><span class="line">46.   &quot;express&quot;,</span><br><span class="line"></span><br><span class="line">47.   &quot;framework&quot;,</span><br><span class="line"></span><br><span class="line">48.   &quot;sinatra&quot;,</span><br><span class="line"></span><br><span class="line">49.   &quot;web&quot;,</span><br><span class="line"></span><br><span class="line">50.   &quot;rest&quot;,</span><br><span class="line"></span><br><span class="line">51.   &quot;restful&quot;,</span><br><span class="line"></span><br><span class="line">52.   &quot;router&quot;,</span><br><span class="line"></span><br><span class="line">53.   &quot;app&quot;,</span><br><span class="line"></span><br><span class="line">54.   &quot;api&quot;</span><br><span class="line"></span><br><span class="line">55.  ],</span><br><span class="line"></span><br><span class="line">56.  &quot;dependencies&quot;: &#123;</span><br><span class="line"></span><br><span class="line">57.   &quot;accepts&quot;: &quot;~1.2.12&quot;,</span><br><span class="line"></span><br><span class="line">58.   &quot;array-flatten&quot;: &quot;1.1.1&quot;,</span><br><span class="line"></span><br><span class="line">59.   &quot;content-disposition&quot;: &quot;0.5.0&quot;,</span><br><span class="line"></span><br><span class="line">60.   &quot;content-type&quot;: &quot;~1.0.1&quot;,</span><br><span class="line"></span><br><span class="line">61.   &quot;cookie&quot;: &quot;0.1.3&quot;,</span><br><span class="line"></span><br><span class="line">62.   &quot;cookie-signature&quot;: &quot;1.0.6&quot;,</span><br><span class="line"></span><br><span class="line">63.   &quot;debug&quot;: &quot;~2.2.0&quot;,</span><br><span class="line"></span><br><span class="line">64.   &quot;depd&quot;: &quot;~1.0.1&quot;,</span><br><span class="line"></span><br><span class="line">65.   &quot;escape-html&quot;: &quot;1.0.2&quot;,</span><br><span class="line"></span><br><span class="line">66.   &quot;etag&quot;: &quot;~1.7.0&quot;,</span><br><span class="line"></span><br><span class="line">67.   &quot;finalhandler&quot;: &quot;0.4.0&quot;,</span><br><span class="line"></span><br><span class="line">68.   &quot;fresh&quot;: &quot;0.3.0&quot;,</span><br><span class="line"></span><br><span class="line">69.   &quot;merge-descriptors&quot;: &quot;1.0.0&quot;,</span><br><span class="line"></span><br><span class="line">70.   &quot;methods&quot;: &quot;~1.1.1&quot;,</span><br><span class="line"></span><br><span class="line">71.   &quot;on-finished&quot;: &quot;~2.3.0&quot;,</span><br><span class="line"></span><br><span class="line">72.   &quot;parseurl&quot;: &quot;~1.3.0&quot;,</span><br><span class="line"></span><br><span class="line">73.   &quot;path-to-regexp&quot;: &quot;0.1.7&quot;,</span><br><span class="line"></span><br><span class="line">74.   &quot;proxy-addr&quot;: &quot;~1.0.8&quot;,</span><br><span class="line"></span><br><span class="line">75.   &quot;qs&quot;: &quot;4.0.0&quot;,</span><br><span class="line"></span><br><span class="line">76.   &quot;range-parser&quot;: &quot;~1.0.2&quot;,</span><br><span class="line"></span><br><span class="line">77.   &quot;send&quot;: &quot;0.13.0&quot;,</span><br><span class="line"></span><br><span class="line">78.   &quot;serve-static&quot;: &quot;~1.10.0&quot;,</span><br><span class="line"></span><br><span class="line">79.   &quot;type-is&quot;: &quot;~1.6.6&quot;,</span><br><span class="line"></span><br><span class="line">80.   &quot;utils-merge&quot;: &quot;1.0.0&quot;,</span><br><span class="line"></span><br><span class="line">81.   &quot;vary&quot;: &quot;~1.0.1&quot;</span><br><span class="line"></span><br><span class="line">82.  &#125;,</span><br><span class="line"></span><br><span class="line">83.  &quot;devDependencies&quot;: &#123;</span><br><span class="line"></span><br><span class="line">84.   &quot;after&quot;: &quot;0.8.1&quot;,</span><br><span class="line"></span><br><span class="line">85.   &quot;ejs&quot;: &quot;2.3.3&quot;,</span><br><span class="line"></span><br><span class="line">86.   &quot;istanbul&quot;: &quot;0.3.17&quot;,</span><br><span class="line"></span><br><span class="line">87.   &quot;marked&quot;: &quot;0.3.5&quot;,</span><br><span class="line"></span><br><span class="line">88.   &quot;mocha&quot;: &quot;2.2.5&quot;,</span><br><span class="line"></span><br><span class="line">89.   &quot;should&quot;: &quot;7.0.2&quot;,</span><br><span class="line"></span><br><span class="line">90.   &quot;supertest&quot;: &quot;1.0.1&quot;,</span><br><span class="line"></span><br><span class="line">91.   &quot;body-parser&quot;: &quot;~1.13.3&quot;,</span><br><span class="line"></span><br><span class="line">92.   &quot;connect-redis&quot;: &quot;~2.4.1&quot;,</span><br><span class="line"></span><br><span class="line">93.   &quot;cookie-parser&quot;: &quot;~1.3.5&quot;,</span><br><span class="line"></span><br><span class="line">94.   &quot;cookie-session&quot;: &quot;~1.2.0&quot;,</span><br><span class="line"></span><br><span class="line">95.   &quot;express-session&quot;: &quot;~1.11.3&quot;,</span><br><span class="line"></span><br><span class="line">96.   &quot;jade&quot;: &quot;~1.11.0&quot;,</span><br><span class="line"></span><br><span class="line">97.   &quot;method-override&quot;: &quot;~2.3.5&quot;,</span><br><span class="line"></span><br><span class="line">98.   &quot;morgan&quot;: &quot;~1.6.1&quot;,</span><br><span class="line"></span><br><span class="line">99.   &quot;multiparty&quot;: &quot;~4.1.2&quot;,</span><br><span class="line"></span><br><span class="line">100.   &quot;vhost&quot;: &quot;~3.0.1&quot;</span><br><span class="line"></span><br><span class="line">101.  &#125;,</span><br><span class="line"></span><br><span class="line">102.  &quot;engines&quot;: &#123;</span><br><span class="line"></span><br><span class="line">103.   &quot;node&quot;: &quot;&gt;= 0.10.0&quot;</span><br><span class="line"></span><br><span class="line">104.  &#125;,</span><br><span class="line"></span><br><span class="line">105.  &quot;files&quot;: [</span><br><span class="line"></span><br><span class="line">106.   &quot;LICENSE&quot;,</span><br><span class="line"></span><br><span class="line">107.   &quot;History.md&quot;,</span><br><span class="line"></span><br><span class="line">108.   &quot;Readme.md&quot;,</span><br><span class="line"></span><br><span class="line">109.   &quot;index.js&quot;,</span><br><span class="line"></span><br><span class="line">110.   &quot;lib/&quot;</span><br><span class="line"></span><br><span class="line">111.  ],</span><br><span class="line"></span><br><span class="line">112.  &quot;scripts&quot;: &#123;</span><br><span class="line"></span><br><span class="line">113.   &quot;test&quot;: &quot;mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/&quot;,</span><br><span class="line"></span><br><span class="line">114.   &quot;test-ci&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/ test/acceptance/&quot;,</span><br><span class="line"></span><br><span class="line">115.   &quot;test-cov&quot;: &quot;istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/&quot;,</span><br><span class="line"></span><br><span class="line">116.   &quot;test-tap&quot;: &quot;mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/&quot;</span><br><span class="line"></span><br><span class="line">117.  &#125;,</span><br><span class="line"></span><br><span class="line">118.  &quot;gitHead&quot;: &quot;ef7ad681b245fba023843ce94f6bcb8e275bbb8e&quot;,</span><br><span class="line"></span><br><span class="line">119.  &quot;bugs&quot;: &#123;</span><br><span class="line"></span><br><span class="line">120.   &quot;url&quot;: &quot;https://github.com/strongloop/express/issues&quot;</span><br><span class="line"></span><br><span class="line">121.  &#125;,</span><br><span class="line"></span><br><span class="line">122.  &quot;_id&quot;: &quot;express@4.13.3&quot;,</span><br><span class="line"></span><br><span class="line">123.  &quot;_shasum&quot;: &quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;,</span><br><span class="line"></span><br><span class="line">124.  &quot;_from&quot;: &quot;express@*&quot;,</span><br><span class="line"></span><br><span class="line">125.  &quot;_npmVersion&quot;: &quot;1.4.28&quot;,</span><br><span class="line"></span><br><span class="line">126.  &quot;_npmUser&quot;: &#123;</span><br><span class="line"></span><br><span class="line">127.   &quot;name&quot;: &quot;dougwilson&quot;,</span><br><span class="line"></span><br><span class="line">128.   &quot;email&quot;: &quot;doug@somethingdoug.com&quot;</span><br><span class="line"></span><br><span class="line">129.  &#125;,</span><br><span class="line"></span><br><span class="line">130.  &quot;maintainers&quot;: [</span><br><span class="line"></span><br><span class="line">131.   &#123;</span><br><span class="line"></span><br><span class="line">132.    &quot;name&quot;: &quot;tjholowaychuk&quot;,</span><br><span class="line"></span><br><span class="line">133.    &quot;email&quot;: &quot;tj@vision-media.ca&quot;</span><br><span class="line"></span><br><span class="line">134.   &#125;,</span><br><span class="line"></span><br><span class="line">135.   &#123;</span><br><span class="line"></span><br><span class="line">136.    &quot;name&quot;: &quot;jongleberry&quot;,</span><br><span class="line"></span><br><span class="line">137.    &quot;email&quot;: &quot;jonathanrichardong@gmail.com&quot;</span><br><span class="line">138.   &#125;,</span><br><span class="line">139.   &#123;</span><br><span class="line">140.    &quot;name&quot;: &quot;dougwilson&quot;,</span><br><span class="line">141.    &quot;email&quot;: &quot;doug@somethingdoug.com&quot;</span><br><span class="line">142.   &#125;,</span><br><span class="line">143.   &#123;</span><br><span class="line">144.    &quot;name&quot;: &quot;rfeng&quot;,</span><br><span class="line">145.    &quot;email&quot;: &quot;enjoyjava@gmail.com&quot;</span><br><span class="line">146.   &#125;,</span><br><span class="line">147.   &#123;</span><br><span class="line">148.    &quot;name&quot;: &quot;aredridel&quot;,</span><br><span class="line"></span><br><span class="line">149.    &quot;email&quot;: &quot;aredridel@dinhe.net&quot;</span><br><span class="line">150.   &#125;,</span><br><span class="line">151.   &#123;</span><br><span class="line">152.    &quot;name&quot;: &quot;strongloop&quot;,</span><br><span class="line">153.    &quot;email&quot;: &quot;callback@strongloop.com&quot;</span><br><span class="line">154.   &#125;,</span><br><span class="line">155.   &#123;</span><br><span class="line">156.    &quot;name&quot;: &quot;defunctzombie&quot;,</span><br><span class="line">155.    &quot;email&quot;: &quot;shtylman@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">158.   &#125;</span><br><span class="line"></span><br><span class="line">159.  ],</span><br><span class="line"></span><br><span class="line">160.  &quot;dist&quot;: &#123;</span><br><span class="line"></span><br><span class="line">161.   &quot;shasum&quot;: &quot;ddb2f1fb4502bf33598d2b032b037960ca6c80a3&quot;,</span><br><span class="line"></span><br><span class="line">162.   &quot;tarball&quot;: &quot;http://registry.npmjs.org/express/-/express-4.13.3.tgz&quot;</span><br><span class="line"></span><br><span class="line">163.  &#125;,</span><br><span class="line"></span><br><span class="line">164.  &quot;directories&quot;: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">165.  &quot;_resolved&quot;: &quot;https://registry.npmjs.org/express/-/express-4.13.3.tgz&quot;,</span><br><span class="line"></span><br><span class="line">166.  &quot;readme&quot;: &quot;ERROR: No README data found!&quot;</span><br><span class="line"></span><br><span class="line">167. &#125;</span><br></pre></td></tr></table></figure><p><strong>Package.json</strong> <strong>属性说明</strong></p><ul><li><strong>name</strong> - 包名。</li><li><strong>version</strong> - 包的版本号。</li><li><strong>description</strong> - 包的描述。</li><li><strong>homepage</strong> - 包的官网 url 。</li><li><strong>author</strong> - 包的作者姓名。</li><li><strong>contributors</strong> - 包的其他贡献者姓名。</li><li><strong>dependencies</strong> - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li><li><strong>repository</strong> - 包代码存放的地方的类型，可以是 git 或 svn，git 可在     Github 上。</li><li><strong>main</strong> - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</li><li><strong>keywords</strong> - 关键字</li></ul><p><strong>卸载模块</strong></p><p>我们可以使用 npm uninstall 来卸载 Node.js 模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm uninstall express</span><br></pre></td></tr></table></figure><p>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm ls</span><br></pre></td></tr></table></figure><p><strong>更新模块</strong></p><p>我们可以使用 npm update更新模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm update express</span><br></pre></td></tr></table></figure><p><strong>搜索模块</strong></p><p>使用 npm search来搜索模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm search express</span><br></pre></td></tr></table></figure><p><strong>创建模块</strong></p><p>创建模块，package.json 文件是必不可少的。</p><p>我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm init</span><br><span class="line">2. This utility will walk you through creating a package.json file.</span><br><span class="line">3. It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line">4. See `npm help json` for definitive documentation on these fields</span><br><span class="line">5. and exactly what they do.</span><br><span class="line">6. Use `npm install --save` afterwards to install a package and</span><br><span class="line">7. save it as a dependency in the package.json file.</span><br><span class="line">8. Press ^C at any time to quit.</span><br><span class="line">9. name: (node_modules) axihe          # 模块名</span><br><span class="line">10. version: (1.0.0)</span><br><span class="line">11. description: Node.js 测试模块(www.axihe.com) # 描述</span><br><span class="line">12. entry point: (index.js)</span><br><span class="line">13. test command: make test</span><br><span class="line">14. git repository: https://github.com/axihe/axihe.git # Github 地址</span><br><span class="line">15. keywords:</span><br><span class="line">16. author:</span><br><span class="line">17. license: (ISC)</span><br><span class="line">18. About to write to ……/node_modules/package.json:   # 生成地址</span><br><span class="line">19. &#123;</span><br><span class="line">20.  &quot;name&quot;: &quot;axihe&quot;,</span><br><span class="line">21.  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">22.  &quot;description&quot;: &quot;Node.js 测试模块(www.axihe.com)&quot;,</span><br><span class="line">23.  ……</span><br><span class="line">24. &#125;</span><br><span class="line">25. Is this ok? (yes) yes</span><br></pre></td></tr></table></figure><p>以上的信息，你需要根据你自己的情况输入。在最后输入 “yes” 后会生成 package.json 文件。</p><p>接下来我们可以使用 npm adduser 在 npm 资源库中注册用户（使用邮箱注册）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm adduserUsername: mcmohdPassword:Email: (this IS public) mcmohd@gmail.com</span><br></pre></td></tr></table></figure><p>接下来我们就用 npm publishl来发布模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm publish</span><br></pre></td></tr></table></figure><p>如果你以上的步骤都操作正确，你就可以跟其他模块一样使用 npm 来安装。</p><p><strong>版本号</strong></p><p>使用 NPM 下载和发布代码时都会接触到版本号。</p><p>NPM 使用语义版本号来管理代码，这里简单介绍一下。</p><p>语义版本号分为 X.Y.Z 三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。</p><ul><li>如果只是修复 bug，需要更新 Z 位。</li><li>如果是新增了功能，但是向下兼容，需要更新 Y 位。</li><li>如果有大变动，向下不兼容，需要更新 X 位。</li></ul><p>版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。</p><p>例如”argv”: “0.0.x”表示依赖于 0.0.x 系列的最新版 argv。</p><p><strong>NPM</strong> <strong>常用命令</strong></p><p>NPM 还提供了很多功能，package.json 里也有很多其它有用的字段。</p><p>介绍一些NPM常用命令。</p><p>NPM 提供了很多命令，例如 install 和 publish，使用 npm help 可查看所有命令。</p><ul><li>NPM 提供了很多命令，例如install和publish，使用npm help可查看所有命令。</li><li>使用npm help 可查看某条命令的详细帮助，例如npm help install。</li><li>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。</li><li>使用npm update 可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。</li><li>使用npm update -g可以把全局安装的对应命令行程序更新至最新版。</li><li>使用npm cache clear可以清空 NPM 本地缓存，用于对付使用相同版本号发布新版本代码的人。</li><li>使用npm unpublish @可以撤销发布自己发布过的某个版本代码。</li></ul><p><strong>使用淘宝 NPM 镜像</strong></p><p>国内直接使用 npm 的官方镜像，如果网络不怎么给力是非常慢的，这里推荐使用淘宝 NPM 镜像。</p><p>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本（只读），同步频率目前为 10 分钟 一次以保证尽量与官方服务同步。</p><p>你可以使用淘宝定制的 cnpm (gzip 压缩支持） 命令行工具代替默认的 npm:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这样就可以使用 cnpm 命令来安装模块了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ cnpm install [name]</span><br></pre></td></tr></table></figure><p>更多信息可以查阅：<a href="http://npm.taobao.org/。">http://npm.taobao.org/。</a></p><p><strong>nrm</strong> <strong>管理镜像</strong></p><p>更加推荐使用 nrm 来控制 npm 的源</p><p>他可以一条命令切到淘宝 / 网易 /XXX 的源，也可以一条命令切回官方源头，这让我觉得特别给力，特别是我需要发我自己制作的 npm 包的时候；</p><p><strong>Node.js REPL**</strong>（交互式解释器）**</p><p><strong>Node.js REPL**</strong>（交互式解释器）**</p><p>Node.js REPL(Read Eval Print Loop: 交互式解释器） 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。</p><p>Node 自带了交互式解释器，可以执行以下任务：</p><ul><li><strong>读取（Read）</strong> - 读取用户输入，解析输入了 Javascript 数据结构并存储在内存中。</li><li><strong>执行（Eval）</strong> - 执行输入的数据结构</li><li><strong>打印（Print）</strong> - 输出结果</li><li><strong>循环（Loop）</strong> - 循环操作以上步骤直到用户两次按下 <strong>ctrl-c</strong> 按钮退出。</li></ul><p>Node 的交互式解释器可以很好的调试 Javascript 代码。</p><p>开始学习 REPL</p><p>我们可以输入以下命令来启动 Node 的终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node&gt;</span><br></pre></td></tr></table></figure><p>这时我们就可以在 &gt; 后输入简单的表达式，并按下回车键来计算结果。</p><p><strong>简单的表达式运算</strong></p><p>接下来让我们在 Node.js REPL 的命令行窗口中执行简单的数学运算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. $ node</span><br><span class="line">2. &gt; 1 +4</span><br><span class="line">3. 5</span><br><span class="line">4. &gt; 5 / 2</span><br><span class="line">5. 2.5</span><br><span class="line">6. &gt; 3 * 6</span><br><span class="line">7. 18</span><br><span class="line">8. &gt; 4 - 1</span><br><span class="line">9. 3</span><br><span class="line">10. &gt; 1 + ( 2 * 3 ) - 4</span><br><span class="line">11. 3</span><br><span class="line">12. &gt; </span><br></pre></td></tr></table></figure><p><strong>使用变量</strong></p><p>你可以将数据存储在变量中，并在你需要的时候使用它。</p><p>变量声明需要使用 <strong>var</strong> 关键字，如果没有使用 var 关键字变量会直接打印出来。</p><p>使用 <strong>var</strong> 关键字的变量可以使用 console.log() 来输出变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. $ node</span><br><span class="line">2. &gt; x = 10</span><br><span class="line">3. 10</span><br><span class="line">4. &gt; var y = 10</span><br><span class="line">5. undefined</span><br><span class="line">6. &gt; x + y</span><br><span class="line">7. 20</span><br><span class="line">8. &gt; console.log(&quot;Hello World&quot;)</span><br><span class="line">9. Hello World</span><br><span class="line">10. undefined</span><br><span class="line">11. &gt; console.log(&quot;www.codecheng.com&quot;)</span><br><span class="line">12. www.codecheng.com</span><br><span class="line">13. undefined</span><br></pre></td></tr></table></figure><p><strong>多行表达式</strong></p><p>Node REPL 支持输入多行表达式，这就有点类似 JavaScript。接下来让我们来执行一个 do-while 循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. $ node</span><br><span class="line">2. &gt; var x = 0</span><br><span class="line">3. undefined</span><br><span class="line">4. &gt; do &#123;</span><br><span class="line">5. ... x++;</span><br><span class="line">6. ... console.log(&quot;x: &quot; + x);</span><br><span class="line">7. ... &#125; while ( x &lt; 5 );</span><br><span class="line">8. x: 1</span><br><span class="line">9. x: 2</span><br><span class="line">10. x: 3</span><br><span class="line">11. x: 4</span><br><span class="line">12. x: 5</span><br><span class="line">13. undefined</span><br><span class="line">14. &gt; </span><br></pre></td></tr></table></figure><p><strong>…</strong> 三个点的符号是系统自动生成的，你回车换行后即可。Node 会自动检测是否为连续的表达式。</p><p><strong>下划线</strong> <strong>(_)</strong> <strong>变量</strong></p><p>你可以使用下划线 (_) 获取上一个表达式的运算结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. $ node</span><br><span class="line">2. &gt; var x = 10</span><br><span class="line">3. undefined</span><br><span class="line">4. &gt; var y = 20</span><br><span class="line">5. undefined</span><br><span class="line">6. &gt; x + y</span><br><span class="line">7. 30</span><br><span class="line">8. &gt; var sum = _</span><br><span class="line">9. undefined</span><br><span class="line">10. &gt; console.log(sum)</span><br><span class="line">11. 30</span><br><span class="line">12. undefined</span><br><span class="line">13. &gt; </span><br></pre></td></tr></table></figure><p><strong>REPL</strong> <strong>命令</strong></p><ul><li><strong>ctrl + c</strong> - 退出当前终端。</li><li><strong>ctrl + c</strong> <strong>按下两次</strong> - 退出 Node REPL。</li><li><strong>ctrl + d</strong> - 退出 Node REPL.</li><li><strong>向上 / 向下 键</strong> - 查看输入的历史命令</li><li><strong>tab</strong> <strong>键</strong> - 列出当前命令</li><li><strong>.help</strong> - 列出使用命令</li><li><strong>.break</strong> - 退出多行表达式</li><li><strong>.clear</strong> - 退出多行表达式</li><li><strong>.save *filename*</strong> - 保存当前的 Node REPL 会话到指定文件</li><li><strong>.load *filename*</strong> - 载入当前 Node REPL 会话的文件内容。</li></ul><p><strong>停止 REPL</strong></p><p>前面我们已经提到按下两次 <strong>ctrl + c</strong> 键就能退出 REPL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node&gt;(^C again to quit)&gt;</span><br></pre></td></tr></table></figure><p><strong>Node.js</strong> <strong>回调函数</strong></p><p><strong>Node.js</strong> <strong>回调函数</strong></p><p>Node.js 异步编程的直接体现就是回调。</p><p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。</p><p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p><p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p><p>回调函数一般作为函数的最后一个参数出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. function foo1(name, age, callback) &#123; &#125;</span><br><span class="line"></span><br><span class="line">2. function foo2(value, callback1, callback2) &#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>阻塞代码实例</strong></p><p>创建一个文件 input.txt ，内容如下：</p><ol><li>我的博客地址：www.mrschen.top</li></ol><p>创建 main.js 文件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2. var data = fs.readFileSync(&#x27;input.txt&#x27;);</span><br><span class="line">3. console.log(data.toString());</span><br><span class="line">4. console.log(&quot;程序执行结束!&quot;);</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. $ node main.js</span><br><span class="line">2. 我的博客地址：www.mrschen.top</span><br><span class="line">3. 程序执行结束!</span><br></pre></td></tr></table></figure><p><strong>非阻塞代码实例</strong></p><p>创建一个文件 input.txt ，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 我的博客地址：www.mrschen.top</span><br></pre></td></tr></table></figure><p>创建 main.js 文件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2. fs.readFile(&#x27;input.txt&#x27;, function (err, data) &#123;</span><br><span class="line">3.   if (err) return console.error(err);</span><br><span class="line">4.   console.log(data.toString());</span><br><span class="line">5. &#125;);</span><br><span class="line">6. console.log(&quot;程序执行结束!&quot;);</span><br></pre></td></tr></table></figure><p>以上代码执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. $ node main.js</span><br><span class="line">2. 程序执行结束!</span><br><span class="line">3. 我的博客地址：www.mrschen.top</span><br></pre></td></tr></table></figure><p>以上两个实例我们了解了阻塞与非阻塞调用的不同。第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。</p><p>因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</p><p><strong>Node.js</strong> <strong>事件循环</strong></p><p><strong>Node.js</strong> <strong>事件循环</strong></p><p>Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p><p>Node.js 几乎每一个 API 都是支持回调函数的。</p><p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p><p>Node.js 单线程类似进入一个 while(true) 的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数。</p><p><strong>事件驱动程序</strong></p><p>Node.js 使用事件驱动模型，当 web server 接收到请求，就把它关闭然后进行处理，然后去服务下一个 web 请求。</p><p>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。</p><p>这个模型非常高效可扩展性非常强，因为 webserver 一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式 IO 或者事件驱动 IO）</p><p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。</p><p><img src="C:\Users\86133\Pictures\node11.jpg" alt="img"></p><p>整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题 (Subject)，而所有注册到这个事件上的处理函数相当于观察者 (Observer)。</p><p>Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. // 引入 events 模块</span><br><span class="line">2. var events = require(&#x27;events&#x27;);</span><br><span class="line">3. // 创建 eventEmitter 对象</span><br><span class="line">4. var eventEmitter = new events.EventEmitter();</span><br></pre></td></tr></table></figure><p>以下程序绑定事件处理程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. // 绑定事件及事件的处理程序</span><br><span class="line">2. eventEmitter.on(&#x27;eventName&#x27;, eventHandler);</span><br></pre></td></tr></table></figure><p>我们可以通过程序触发事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. // 触发事件eventEmitter.emit(&#x27;eventName&#x27;);</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><p>创建 main.js 文件，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. // 引入 events 模块</span><br><span class="line">2. var events = require(&#x27;events&#x27;);</span><br><span class="line">3. // 创建 eventEmitter 对象</span><br><span class="line">4. var eventEmitter = new events.EventEmitter();</span><br><span class="line">5. // 创建事件处理程序</span><br><span class="line">6. var connectHandler = function connected() &#123;</span><br><span class="line">7.   console.log(&#x27;连接成功。&#x27;);</span><br><span class="line">8.   // 触发 data_received 事件</span><br><span class="line">9.   eventEmitter.emit(&#x27;data_received&#x27;);</span><br><span class="line">10. &#125;</span><br><span class="line">11. // 绑定 connection 事件处理程序</span><br><span class="line">12. eventEmitter.on(&#x27;connection&#x27;, connectHandler);</span><br><span class="line">13. // 使用匿名函数绑定 data_received 事件</span><br><span class="line">14. eventEmitter.on(&#x27;data_received&#x27;, function()&#123;</span><br><span class="line">15.   console.log(&#x27;数据接收成功。&#x27;);</span><br><span class="line">16. &#125;);</span><br><span class="line">17. // 触发 connection 事件</span><br><span class="line">18. eventEmitter.emit(&#x27;connection&#x27;);</span><br><span class="line">19. console.log(&quot;程序执行完毕。&quot;);</span><br></pre></td></tr></table></figure><p>接下来让我们执行以上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. $ node main.js</span><br><span class="line">2. 连接成功。</span><br><span class="line">3. 数据接收成功。</span><br><span class="line">4. 程序执行完毕。</span><br></pre></td></tr></table></figure><p><strong>Node</strong> <strong>应用程序是如何工作的？</strong></p><p>在 Node 应用程序中，执行异步操作的函数将回调函数作为最后一个参数， 回调函数接收错误对象作为第一个参数。</p><p>接下来让我们来重新看下前面的实例，创建一个 input.txt , 文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\1. 我的博客地址：www.mrschen.top</span><br><span class="line"></span><br><span class="line">创建 main.js 文件，代码如下：</span><br><span class="line"></span><br><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2.fs.readFile(&#x27;input.txt&#x27;, function (err, data) &#123;</span><br><span class="line">3.if (err)&#123;</span><br><span class="line">4.console.log(err.stack);</span><br><span class="line">5.return;</span><br><span class="line">6. &#125;</span><br><span class="line">7. console.log(data.toString());</span><br><span class="line">8. &#125;);</span><br><span class="line">9. console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure><p>以上程序中 fs.readFile() 是异步函数用于读取文件。 如果在读取文件过程中发生错误，错误 err 对象就会输出错误信息。</p><p>如果没发生错误，readFile 跳过 err 对象的输出，文件内容就通过回调函数输出。</p><p>执行以上代码，执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 我的博客地址：www.mrschen.top</span><br></pre></td></tr></table></figure><p>接下来我们删除 input.txt 文件，执行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 程序执行完毕Error: ENOENT, open &#x27;input.txt&#x27;</span><br></pre></td></tr></table></figure><p>因为文件 input.txt 不存在，所以输出了错误信息。</p><p><strong>Node.js EventEmitter</strong></p><p><strong>Node.js EventEmitter</strong></p><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。</p><p><strong>EventEmitter</strong> <strong>类</strong></p><p>events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</p><p>你可以通过 require(“events”); 来访问该模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. // 引入 events 模块</span><br><span class="line">2. var events = require(&#x27;events&#x27;);</span><br><span class="line">3. // 创建 eventEmitter 对象</span><br><span class="line">4. var eventEmitter = new events.EventEmitter();</span><br></pre></td></tr></table></figure><p>EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。</p><p>下面我们用一个简单的例子说明 EventEmitter 的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. //event.js 文件</span><br><span class="line">2. var EventEmitter = require(&#x27;events&#x27;).EventEmitter;</span><br><span class="line">3. var event = new EventEmitter();</span><br><span class="line">4. event.on(&#x27;some_event&#x27;, function() &#123;</span><br><span class="line">5.   console.log(&#x27;some_event 事件触发&#x27;);</span><br><span class="line">6. &#125;);</span><br><span class="line">7. setTimeout(function() &#123;</span><br><span class="line">8.   event.emit(&#x27;some_event&#x27;);</span><br><span class="line">9. &#125;, 1000);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p>运行这段代码，1 秒后控制台输出了 <strong>‘some_event 事件触发’</strong>。其原理是 event 对象注册了事件 some_event 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用 some_event 的监听器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. $ node event.js</span><br><span class="line">2. some_event 事件触发</span><br></pre></td></tr></table></figure><p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><p>让我们以下面的例子解释这个过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. //event.js 文件</span><br><span class="line">2. var events = require(&#x27;events&#x27;);</span><br><span class="line">3. var emitter = new events.EventEmitter();</span><br><span class="line">4. emitter.on(&#x27;someEvent&#x27;, function(arg1, arg2) &#123;</span><br><span class="line">5.console.log(&#x27;listener1&#x27;, arg1, arg2);</span><br><span class="line">6. &#125;);</span><br><span class="line">7. emitter.on(&#x27;someEvent&#x27;, function(arg1, arg2) &#123;</span><br><span class="line">8.console.log(&#x27;listener2&#x27;, arg1, arg2);</span><br><span class="line">9. &#125;);</span><br><span class="line">10. emitter.emit(&#x27;someEvent&#x27;, &#x27;arg1 参数&#x27;, &#x27;arg2 参数&#x27;);</span><br></pre></td></tr></table></figure><p>执行以上代码，运行的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. $ node event.js</span><br><span class="line">2. listener1 arg1 参数 arg2 参数</span><br><span class="line">3. listener2 arg1 参数 arg2 参数</span><br></pre></td></tr></table></figure><p>以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。</p><p>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是 EventEmitter 最简单的用法。</p><p>EventEmitter 提供了多个属性，如 <strong>on</strong> 和 <strong>emit</strong>。<strong>on</strong> 函数用于绑定事件函数，<strong>emit</strong> 属性用于触发一个事件。接下来我们来具体看下 EventEmitter 的属性介绍。</p><p><strong>方法</strong></p><div class="table-container"><table><thead><tr><th><strong>序号</strong></th><th><strong>方法 &amp; 描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>addListener(event, listener)</strong> 为指定事件添加一个监听器到监听器数组的尾部。</td></tr><tr><td>2</td><td><strong>on(event, listener)</strong> 为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。server.on(‘connection’,  function (stream) { console.log(‘someone connected!’);});</td></tr><tr><td>3</td><td><strong>once(event, listener)</strong> 为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。server.once(‘connection’, function (stream) {  console.log(‘Ah, we have our first user!’);});</td></tr><tr><td>4</td><td><strong>removeListener(event, listener)</strong> 移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。它接受两个参数，第一个是事件名称，第二个是回调函数名称。var callback = function(stream) { console.log(‘someone  connected!’);};server.on(‘connection’, callback);//  …server.removeListener(‘connection’, callback);</td></tr><tr><td>5</td><td><strong>removeAllListeners([event])</strong> 移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</td></tr><tr><td>6</td><td><strong>setMaxListeners(n)</strong> 默认情况下，  EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。</td></tr><tr><td>7</td><td><strong>listeners(event)</strong> 返回指定事件的监听器数组。</td></tr><tr><td>8</td><td><strong>emit(event, [arg1], [arg2], […])</strong> 按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false。</td></tr></tbody></table></div><p><strong>类方法</strong></p><div class="table-container"><table><thead><tr><th><strong>序号</strong></th><th><strong>方法 &amp; 描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>listenerCount(emitter, event)</strong> 返回指定事件的监听器数量。</td></tr></tbody></table></div><p>\1. events.EventEmitter.listenerCount(emitter, eventName) //已废弃，不推荐events.emitter.listenerCount(eventName) //推荐</p><p><strong>事件</strong></p><div class="table-container"><table><thead><tr><th><strong>序号</strong></th><th><strong>事件 &amp; 描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>newListener</strong> <strong>event</strong> - 字符串，事件名称<strong>listener</strong> - 处理事件函数该事件在添加新监听器时被触发。</td></tr><tr><td>2</td><td><strong>removeListener</strong> <strong>event</strong> - 字符串，事件名称<strong>listener</strong> - 处理事件函数从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。</td></tr></tbody></table></div><p><strong>实例</strong></p><p>以下实例通过 connection（连接）事件演示了 EventEmitter 类的应用。</p><p>创建 main.js 文件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.var events = require(&#x27;events&#x27;);</span><br><span class="line">2. var eventEmitter = new events.EventEmitter();</span><br><span class="line">3. // 监听器 #1</span><br><span class="line">4. var listener1 = function listener1() &#123;</span><br><span class="line">5.   console.log(&#x27;监听器 listener1 执行。&#x27;);</span><br><span class="line">6. &#125;</span><br><span class="line">7. // 监听器 #2</span><br><span class="line">8. var listener2 = function listener2() &#123;</span><br><span class="line">9.  console.log(&#x27;监听器 listener2 执行。&#x27;);</span><br><span class="line">10. &#125;</span><br><span class="line">11. // 绑定 connection 事件，处理函数为 listener1</span><br><span class="line">12. eventEmitter.addListener(&#x27;connection&#x27;, listener1);</span><br><span class="line">13. // 绑定 connection 事件，处理函数为 listener2</span><br><span class="line">14. eventEmitter.on(&#x27;connection&#x27;, listener2);</span><br><span class="line">15. var eventListeners = eventEmitter.listenerCount(&#x27;connection&#x27;);</span><br><span class="line">16. console.log(eventListeners + &quot; 个监听器监听连接事件。&quot;);</span><br><span class="line">17. // 处理 connection 事件</span><br><span class="line">18. eventEmitter.emit(&#x27;connection&#x27;);</span><br><span class="line">19. // 移除监绑定的 listener1 函数</span><br><span class="line">20. eventEmitter.removeListener(&#x27;connection&#x27;, listener1);</span><br><span class="line">21. console.log(&quot;listener1 不再受监听。&quot;);</span><br><span class="line">22. // 触发连接事件</span><br><span class="line">23. eventEmitter.emit(&#x27;connection&#x27;);</span><br><span class="line">24. eventListeners = eventEmitter.listenerCount(&#x27;connection&#x27;);</span><br><span class="line">25. console.log(eventListeners + &quot; 个监听器监听连接事件。&quot;);</span><br><span class="line">26. console.log(&quot;程序执行完毕。&quot;);</span><br></pre></td></tr></table></figure><p>以上代码，执行结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. $ node main.js</span><br><span class="line">2. 2 个监听器监听连接事件。</span><br><span class="line">3. 监听器 listener1 执行。</span><br><span class="line">4. 监听器 listener2 执行。</span><br><span class="line">5. listener1 不再受监听。</span><br><span class="line">6. 监听器 listener2 执行。</span><br><span class="line">7. 1 个监听器监听连接事件。</span><br><span class="line">8. 程序执行完毕。</span><br></pre></td></tr></table></figure><p><strong>error</strong> <strong>事件</strong></p><p>EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。</p><p>当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。</p><p>我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. var events = require(&#x27;events&#x27;);</span><br><span class="line">2. var emitter = new events.EventEmitter();</span><br><span class="line">3. emitter.emit(&#x27;error&#x27;);</span><br></pre></td></tr></table></figure><p>运行时会显示以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. node.js:201</span><br><span class="line">2. throw e; // process.nextTick error, or &#x27;error&#x27; event on first tick</span><br><span class="line">3. ^</span><br><span class="line">4. Error: Uncaught, unspecified &#x27;error&#x27; event.</span><br><span class="line">5. at EventEmitter.emit (events.js:50:15)</span><br><span class="line">6. at Object. (/home/byvoid/error.js:5:9)</span><br><span class="line">7. at Module._compile (module.js:441:26)</span><br><span class="line">8. at Object..js (module.js:459:10)</span><br><span class="line">9. at Module.load (module.js:348:31)</span><br><span class="line">10. at Function._load (module.js:308:12)</span><br><span class="line">11. at Array.0 (module.js:479:10)</span><br><span class="line">12. at EventEmitter._tickCallback (node.js:192:40)</span><br></pre></td></tr></table></figure><p><strong>继承 EventEmitter</strong></p><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p><p>为什么要这样做呢？原因有两点：</p><p>首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发生应该是一个对象的方法。</p><p>其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。</p><p><strong>Node.js Buffer</strong></p><p><strong>Node.js Buffer**</strong>（缓冲区）**</p><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p><p>但在处理像 TCP 流或文件流时，必须使用到二进制数据。因此在 Node.js 中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><p>在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 Node.js 处理二进制数据，每当需要在 Node.js 中处理 I/O 操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer 类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。</p><p>在 v6.0 之前创建 Buffer 对象直接使用 new Buffer() 构造函数来创建对象实例，但是 Buffer 对内存的权限操作相比很大，可以直接捕获一些敏感信息，所以在 v6.0 以后，官方文档里面建议使用 Buffer.from() 接口去创建 Buffer 对象。</p><p><strong>Buffer</strong> <strong>与字符编码</strong></p><p>Buffer 实例一般用于表示编码字符的序列，比如 UTF-8 、 UCS2 、 Base64 、或十六进制编码的数据。 通过使用显式的字符编码，就可以在 Buffer 实例与普通的 JavaScript 字符串之间进行相互转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. const buf = Buffer.from(&#x27;axihe&#x27;, &#x27;ascii&#x27;);</span><br><span class="line">2. // 输出 72756e6f6f62</span><br><span class="line">3. console.log(buf.toString(&#x27;hex&#x27;));</span><br><span class="line">4. // 输出 cnVub29i</span><br><span class="line">5. console.log(buf.toString(&#x27;base64&#x27;));</span><br></pre></td></tr></table></figure><p><strong>Node.js</strong> <strong>目前支持的字符编码包括：</strong></p><ul><li><strong>ascii</strong> - 仅支持 7 位     ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</li><li><strong>utf8</strong> - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</li><li><strong>utf16le</strong> - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li><li><strong>ucs2</strong> - <strong>utf16le</strong> 的别名。</li><li><strong>base64</strong> - Base64 编码。</li><li><strong>latin1</strong> - 一种把 <strong>Buffer</strong> 编码成一字节编码的字符串的方式。</li><li><strong>binary</strong> - <strong>latin1</strong> 的别名。</li><li><strong>hex</strong> - 将每个字节编码为两个十六进制字符。</li></ul><p><strong>创建 Buffer 类</strong></p><p>Buffer 提供了以下 API 来创建 Buffer 类：</p><ul><li><strong>Buffer.alloc(size[,     fill[, encoding]])**</strong>：** 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li><li><strong>Buffer.allocUnsafe(size)**</strong>：** 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li><li><strong>Buffer.allocUnsafeSlow(size)</strong></li><li><strong>Buffer.from(array)**</strong>：** 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li><li><strong>Buffer.from(arrayBuffer[,     byteOffset[, length]])**</strong>：** 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</li><li><strong>Buffer.from(buffer)**</strong>：** 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li><li><strong>Buffer.from(string[,     encoding])**</strong>：** 返回一个被 string 的值初始化的新的 Buffer 实例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> i.   // 创建一个长度为 10、且用 0 填充的 Buffer。</span><br><span class="line">ii.   const buf1 = Buffer.alloc(10);</span><br><span class="line">iii.   // 创建一个长度为 10、且用 0x1 填充的 Buffer。</span><br><span class="line">iv.   const buf2 = Buffer.alloc(10, 1);</span><br><span class="line">v.   // 创建一个长度为 10、且未初始化的 Buffer。</span><br><span class="line">vi.   // 这个方法比调用 Buffer.alloc() 更快，</span><br><span class="line">vii.   // 但返回的 Buffer 实例可能包含旧数据，</span><br><span class="line">viii.   // 因此需要使用 fill() 或 write() 重写。</span><br><span class="line">ix.   const buf3 = Buffer.allocUnsafe(10);</span><br><span class="line">x.   // 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span><br><span class="line">xi.   const buf4 = Buffer.from([1, 2, 3]);</span><br><span class="line">xii.   // 创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。</span><br><span class="line">xiii.   const buf5 = Buffer.from(&#x27;tést&#x27;);</span><br><span class="line">xiv.   // 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。</span><br><span class="line">xv.   const buf6 = Buffer.from(&#x27;tést&#x27;, &#x27;latin1&#x27;);</span><br></pre></td></tr></table></figure><p><strong>写入缓冲区</strong></p><p><strong>语法</strong></p><p>写入 Node 缓冲区的语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数描述如下：</p><ul><li><strong>string</strong> - 写入缓冲区的字符串。</li><li><strong>offset</strong> - 缓冲区开始写入的索引值，默认为 0 。</li><li><strong>length</strong> - 写入的字节数，默认为 buffer.length</li><li><strong>encoding</strong> - 使用的编码。默认为 ‘utf8’ 。</li></ul><p>根据 encoding 的字符编码写入 string 到 buf 中的 offset 位置。 length 参数是写入的字节数。 如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。</p><p><strong>返回值</strong></p><p>返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. buf = Buffer.alloc(256);</span><br><span class="line">2. len = buf.write(&quot;www.axihe.com&quot;);</span><br><span class="line">3. console.log(&quot;写入字节数 : &quot;+ len);</span><br></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. $node main.js</span><br><span class="line">2. 写入字节数 : 14</span><br></pre></td></tr></table></figure><p><strong>从缓冲区读取数据</strong></p><p><strong>语法</strong></p><p>读取 Node 缓冲区数据的语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. buf.toString([encoding[, start[, end]]])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数描述如下：</p><ul><li><strong>encoding</strong> - 使用的编码。默认为 ‘utf8’ 。</li><li><strong>start</strong> - 指定开始读取的索引位置，默认为 0。</li><li><strong>end</strong> - 结束位置，默认为缓冲区的末尾。</li></ul><p><strong>返回值</strong></p><p>解码缓冲区数据并使用指定的编码返回字符串。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. buf = Buffer.alloc(26);</span><br><span class="line">2. for (var i = 0 ; i &lt; 26 ; i++) &#123;</span><br><span class="line">3.  buf[i] = i + 97;</span><br><span class="line">4. &#125;</span><br><span class="line">5. console.log( buf.toString(&#x27;ascii&#x27;));    // 输出: abcdefghijklmnopqrstuvwxyz</span><br><span class="line">6. console.log( buf.toString(&#x27;ascii&#x27;,0,5));  // 输出: abcde</span><br><span class="line">7. console.log( buf.toString(&#x27;utf8&#x27;,0,5));  // 输出: abcde</span><br><span class="line">8. console.log( buf.toString(undefined,0,5)); // 使用 &#x27;utf8&#x27; 编码, 并输出: abcde</span><br></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. $ node main.js</span><br><span class="line">2. abcdefghijklmnopqrstuvwxyz</span><br><span class="line">3. abcde</span><br><span class="line">4. abcde</span><br><span class="line">5. abcde</span><br></pre></td></tr></table></figure><p><strong>将 Buffer 转换为 JSON 对象</strong></p><p><strong>语法</strong></p><p>将 Node Buffer 转换为 JSON 对象的函数语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. buf.toJSON()</span><br></pre></td></tr></table></figure><p>当字符串化一个 Buffer 实例时，JSON.stringify()会隐式地调用该 toJSON()。</p><p><strong>返回值</strong></p><p>返回 JSON 对象。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);</span><br><span class="line">2. const json = JSON.stringify(buf);</span><br><span class="line">3. // 输出: &#123;&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]&#125;</span><br><span class="line">4. console.log(json);</span><br><span class="line">5. const copy = JSON.parse(json, (key, value) =&gt; &#123;</span><br><span class="line">6.return value &amp;&amp; value.type === &#x27;Buffer&#x27; ?</span><br><span class="line">7. Buffer.from(value.data) :</span><br><span class="line">8.   value;</span><br><span class="line">9. &#125;);</span><br><span class="line">10. // 输出:</span><br><span class="line">11. console.log(copy);</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. &#123;&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]&#125;</span><br></pre></td></tr></table></figure><p><strong>缓冲区合并</strong></p><p><strong>语法</strong></p><p>Node 缓冲区合并的语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. Buffer.concat(list[, totalLength])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数描述如下：</p><ul><li><strong>list</strong> - 用于合并的 Buffer 对象数组列表。</li><li><strong>totalLength</strong> - 指定合并后 Buffer 对象的总长度。</li></ul><p><strong>返回值</strong></p><p>返回一个多个成员合并的新 Buffer 对象。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. var buffer1 = Buffer.from((&#x27;node&#x27;));</span><br><span class="line">2. var buffer2 = Buffer.from((&#x27;www.codecheng.com&#x27;));</span><br><span class="line">3. var buffer3 = Buffer.concat([buffer1,buffer2]);</span><br><span class="line">4. console.log(&quot;buffer3 内容: &quot; + buffer3.toString());</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. buffer3 内容: nodewww.codecheng.com</span><br></pre></td></tr></table></figure><p><strong>缓冲区比较</strong></p><p><strong>语法</strong></p><p>Node Buffer 比较的函数语法如下所示，该方法在 Node.js v0.12.2 版本引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. buf.compare(otherBuffer);</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数描述如下：</p><ul><li><strong>otherBuffer</strong> - 与 <strong>buf</strong> 对象比较的另外一个 Buffer 对象。</li></ul><p><strong>返回值</strong></p><p>返回一个数字，表示 <strong>buf</strong> 在 <strong>otherBuffer</strong> 之前，之后或相同。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. var buffer1 = Buffer.from(&#x27;ABC&#x27;);</span><br><span class="line">2. var buffer2 = Buffer.from(&#x27;ABCD&#x27;);</span><br><span class="line">3. var result = buffer1.compare(buffer2);</span><br><span class="line">4. if(result &lt; 0) &#123;</span><br><span class="line">5.   console.log(buffer1 + &quot; 在 &quot; + buffer2 + &quot;之前&quot;);</span><br><span class="line">6. &#125;else if(result == 0)&#123;</span><br><span class="line">7.   console.log(buffer1 + &quot; 与 &quot; + buffer2 + &quot;相同&quot;);</span><br><span class="line">8. &#125;else &#123;</span><br><span class="line">9.   console.log(buffer1 + &quot; 在 &quot; + buffer2 + &quot;之后&quot;);</span><br><span class="line">10. &#125;</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. ABC在ABCD之前</span><br></pre></td></tr></table></figure><p><strong>拷贝缓冲区</strong></p><p><strong>语法</strong></p><p>Node 缓冲区拷贝语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数描述如下：</p><ul><li><strong>targetBuffer</strong> - 要拷贝的 Buffer 对象。</li><li><strong>targetStart</strong> - 数字，可选，默认：0</li><li><strong>sourceStart</strong> - 数字，可选，默认：0</li><li><strong>sourceEnd</strong> - 数字，可选，默认：buffer.length</li></ul><p><strong>返回值</strong></p><p>没有返回值。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. var buf1 = Buffer.from(&#x27;abcdefghijkl&#x27;);</span><br><span class="line">2. var buf2 = Buffer.from(&#x27;axihe&#x27;);</span><br><span class="line">3. //将 buf2 插入到 buf1 指定位置上</span><br><span class="line">4. buf2.copy(buf1, 2);</span><br><span class="line">5. console.log(buf1.toString());</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. abaxiheijkl</span><br></pre></td></tr></table></figure><p><strong>缓冲区裁剪</strong></p><p>Node 缓冲区裁剪语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. buf.slice([start[, end]])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数描述如下：</p><ul><li><strong>start</strong> - 数字，可选，默认：0</li><li><strong>end</strong> - 数字，可选，默认：buffer.length</li></ul><p><strong>返回值</strong></p><p>返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. var buffer1 = Buffer.from(&#x27;axihe&#x27;);</span><br><span class="line">2. // 剪切缓冲区</span><br><span class="line">3. var buffer2 = buffer1.slice(0,2);</span><br><span class="line">4. console.log(&quot;buffer2 content: &quot; + buffer2.toString());</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. buffer2 content: ru</span><br></pre></td></tr></table></figure><p><strong>缓冲区长度</strong></p><p><strong>语法</strong></p><p>Node 缓冲区长度计算语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. buf.length;</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>返回 Buffer 对象所占据的内存长度。</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. var buffer = Buffer.from(&#x27;www.axihe.com&#x27;);</span><br><span class="line">2. // 缓冲区长度</span><br><span class="line">3. console.log(&quot;buffer length: &quot; + buffer.length);</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. buffer length: 14</span><br></pre></td></tr></table></figure><p><strong>方法参考手册</strong></p><p>以下列出了 Node.js Buffer 模块常用的方法（注意有些方法在旧版本是没有的）：</p><div class="table-container"><table><thead><tr><th><strong>序号</strong></th><th><strong>方法 &amp; 描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>new  Buffer(size)</strong> 分配一个新的 size 大小单位为8位字节的 buffer。 注意, size 必须小于 kMaxLength，否则，将会抛出异常 RangeError。废弃的: 使用 Buffer.alloc() 代替（或 Buffer.allocUnsafe()）。</td></tr><tr><td>2</td><td><strong>new  Buffer(buffer)</strong> 拷贝参数 buffer 的数据到 Buffer 实例。废弃的: 使用 Buffer.from(buffer) 代替。</td></tr><tr><td>3</td><td><strong>new  Buffer(str[, encoding])</strong> 分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 ‘utf8’。 废弃的: 使用  Buffer.from(string[, encoding]) 代替。</td></tr><tr><td>4</td><td><strong>buf.length</strong> 返回这个 buffer 的  bytes 数。注意这未必是 buffer 里面内容的大小。length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。</td></tr><tr><td>5</td><td><strong>buf.write(string[,  offset[, length]][, encoding])</strong> 根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 返回 number 类型，表示写入了多少 8 位字节流。如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 length 默认是 buffer.length - offset。  这个方法不会出现写入部分字符。</td></tr><tr><td>6</td><td><strong>buf.writeUIntLE(value,  offset, byteLength[, noAssert])</strong> 将 value 写入到  buffer 里， 它由 offset 和  byteLength 决定，最高支持 48 位无符号整数，小端对齐，例如： const buf = Buffer.allocUnsafe(6);  buf.writeUIntLE(0x1234567890ab, 0, 6); // 输出：<Buffer ab 90 78 56  34 12>console.log(buf);noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。</td></tr><tr><td>7</td><td><strong>buf.writeUIntBE(value,  offset, byteLength[, noAssert])</strong> 将 value 写入到  buffer 里， 它由 offset 和  byteLength 决定，最高支持 48 位无符号整数，大端对齐。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。const buf = Buffer.allocUnsafe(6);  buf.writeUIntBE(0x1234567890ab, 0, 6); // 输出：<Buffer 12 34 56 78  90 ab>console.log(buf);</td></tr><tr><td>8</td><td><strong>buf.writeIntLE(value,  offset, byteLength[, noAssert])</strong> 将value 写入到  buffer 里， 它由offset 和  byteLength 决定，最高支持48位有符号整数，小端对齐。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。</td></tr><tr><td>9</td><td><strong>buf.writeIntBE(value,  offset, byteLength[, noAssert])</strong> 将value 写入到  buffer 里， 它由offset 和 byteLength  决定，最高支持48位有符号整数，大端对齐。noAssert  值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。</td></tr><tr><td>10</td><td><strong>buf.readUIntLE(offset,  byteLength[, noAssert])</strong> 支持读取 48 位以下的无符号数字，小端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。</td></tr><tr><td>11</td><td><strong>buf.readUIntBE(offset,  byteLength[, noAssert])</strong> 支持读取 48 位以下的无符号数字，大端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。</td></tr><tr><td>12</td><td><strong>buf.readIntLE(offset,  byteLength[, noAssert])</strong> 支持读取 48 位以下的有符号数字，小端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。</td></tr><tr><td>13</td><td><strong>buf.readIntBE(offset,  byteLength[, noAssert])</strong> 支持读取 48 位以下的有符号数字，大端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。</td></tr><tr><td>14</td><td><strong>buf.toString([encoding[,  start[, end]]])</strong> 根据 encoding 参数（默认是 ‘utf8’）返回一个解码过的 string 类型。还会根据传入的参数 start (默认是 0) 和 end (默认是  buffer.length)作为取值范围。</td></tr><tr><td>15</td><td><strong>buf.toJSON()</strong> 将 Buffer 实例转换为  JSON 对象。</td></tr><tr><td>16</td><td><strong>buf[index]</strong> 获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。</td></tr><tr><td>17</td><td><strong>buf.equals(otherBuffer)</strong> 比较两个缓冲区是否相等，如果是返回 true，否则返回 false。</td></tr><tr><td>18</td><td><strong>buf.compare(otherBuffer)</strong> 比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。</td></tr><tr><td>19</td><td><strong>buf.copy(targetBuffer[,  targetStart[, sourceStart[, sourceEnd]]])</strong> buffer 拷贝，源和目标可以相同。 targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。</td></tr><tr><td>20</td><td><strong>buf.slice([start[,  end]])</strong> 剪切 Buffer 对象，根据 start(默认是 0 ) 和 end (默认是  buffer.length ) 偏移和裁剪了索引。 负的索引是从 buffer 尾部开始计算的。</td></tr><tr><td>21</td><td><strong>buf.readUInt8(offset[,  noAssert])</strong> 根据指定的偏移量，读取一个无符号 8 位整数。若参数  noAssert 为 true 将不会验证 offset 偏移量参数。  如果这样 offset 可能会超出buffer 的末尾。默认是 false。</td></tr><tr><td>22</td><td><strong>buf.readUInt16LE(offset[,  noAssert])</strong> 根据指定的偏移量，使用特殊的 endian 字节序格式读取一个无符号 16 位整数。若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>23</td><td><strong>buf.readUInt16BE(offset[,  noAssert])</strong> 根据指定的偏移量，使用特殊的 endian 字节序格式读取一个无符号 16 位整数，大端对齐。若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>24</td><td><strong>buf.readUInt32LE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个无符号 32 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>25</td><td><strong>buf.readUInt32BE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个无符号 32 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>26</td><td><strong>buf.readInt8(offset[,  noAssert])</strong> 根据指定的偏移量，读取一个有符号 8 位整数。 若参数  noAssert 为 true 将不会验证 offset 偏移量参数。  这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>27</td><td><strong>buf.readInt16LE(offset[,  noAssert])</strong> 根据指定的偏移量，使用特殊的 endian 格式读取一个 有符号 16 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>28</td><td><strong>buf.readInt16BE(offset[,  noAssert])</strong> 根据指定的偏移量，使用特殊的 endian 格式读取一个 有符号 16 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>29</td><td><strong>buf.readInt32LE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个有符号 32 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>30</td><td><strong>buf.readInt32BE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个有符号 32 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。</td></tr><tr><td>31</td><td><strong>buf.readFloatLE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个  32 位双浮点数，小端对齐。 若参数 noAssert 为  true 将不会验证 offset 偏移量参数。 这意味着  offset 可能会超出 buffer 的末尾。默认是  false。</td></tr><tr><td>32</td><td><strong>buf.readFloatBE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个  32 位双浮点数，大端对齐。 若参数 noAssert 为  true 将不会验证 offset 偏移量参数。 这意味着  offset 可能会超出 buffer 的末尾。默认是  false。</td></tr><tr><td>33</td><td><strong>buf.readDoubleLE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个  64 位双精度数，小端对齐。 若参数 noAssert 为  true 将不会验证 offset 偏移量参数。 这意味着  offset 可能会超出 buffer 的末尾。默认是  false。</td></tr><tr><td>34</td><td><strong>buf.readDoubleBE(offset[,  noAssert])</strong> 根据指定的偏移量，使用指定的 endian 字节序格式读取一个  64 位双精度数，大端对齐。 若参数 noAssert 为  true 将不会验证 offset 偏移量参数。 这意味着  offset 可能会超出 buffer 的末尾。默认是  false。</td></tr><tr><td>35</td><td><strong>buf.writeUInt8(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量将 value 写入 buffer。注意：value 必须是一个合法的无符号 8 位整数。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则不要使用。默认是 false。</td></tr><tr><td>36</td><td><strong>buf.writeUInt16LE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将  value 写入 buffer。注意：value 必须是一个合法的无符号 16 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。</td></tr><tr><td>37</td><td><strong>buf.writeUInt16BE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的无符号 16 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。</td></tr><tr><td>38</td><td><strong>buf.writeUInt32LE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式 (LITTLE-ENDIAN: 小字节序）将 value 写入 buffer。注意：value 必须是一个合法的无符号 32 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是  false。</td></tr><tr><td>39</td><td><strong>buf.writeUInt32BE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式 (Big-Endian: 大字节序）将 value 写入 buffer。注意：value 必须是一个合法的有符号 32 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是  false。</td></tr><tr><td>40</td><td><strong>buf.writeInt8(value,  offset[, noAssert])</strong> offset=”” 偏移量将=”” value=”” 写入=””  buffer=”” 。注意：value=”” 必须是一个合法的=”” signed=”” 8=”” 位整数。=”” 若参数=”” noassert=”” 为=”” true=”” 将不会验证=”” 和=”” 偏移量参数。=””  这意味着=”” 可能过大，或者=”” 可能会超出=”” 的末尾从而造成=”” 被丢弃。=”” 除非你对这个参数非常有把握，否则尽量不要使用。默认是=”” false。</td></tr><tr><td>41</td><td><strong>buf.writeInt16LE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 16 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false 。</td></tr><tr><td>42</td><td><strong>buf.writeInt16BE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 16 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false 。</td></tr><tr><td>43</td><td><strong>buf.writeInt32LE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 32 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。</td></tr><tr><td>44</td><td><strong>buf.writeInt32BE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 32 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。</td></tr><tr><td>45</td><td><strong>buf.writeFloatLE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer 。注意：当 value 不是一个 32 位浮点数类型的值时，结果将是不确定的。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。</td></tr><tr><td>46</td><td><strong>buf.writeFloatBE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer 。注意：当 value 不是一个 32 位浮点数类型的值时，结果将是不确定的。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。</td></tr><tr><td>47</td><td><strong>buf.writeDoubleLE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个有效的 64 位 double 类型的值。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是  false。</td></tr><tr><td>48</td><td><strong>buf.writeDoubleBE(value,  offset[, noAssert])</strong> 根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个有效的 64 位 double 类型的值。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是  false。</td></tr><tr><td>49</td><td><strong>buf.fill(value</strong><a href="https://www.kuangstudy.com/bbs/, end"><strong>,   offset</strong></a><strong>)</strong> 使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是  buffer.length) ，将会填充整个buffer。</td></tr></tbody></table></div><p><strong>Node.js Stream</strong></p><p><strong>Node.js Stream(**</strong>流)**</p><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。</p><p>Node.js，Stream 有四种流类型：</p><ul><li><strong>Readable</strong> - 可读操作。</li><li><strong>Writable</strong> - 可写操作。</li><li><strong>Duplex</strong> - 可读可写操作.</li><li><strong>Transform</strong> - 操作被写入数据，然后读出结果。</li></ul><p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p><ul><li><strong>data</strong> - 当有数据可读时触发。</li><li><strong>end</strong> - 没有更多的数据可读时触发。</li><li><strong>error</strong> - 在接收和写入过程中发生错误时触发。</li><li><strong>finish</strong> - 所有数据已被写入到底层系统时触发。</li></ul><p>介绍常用的流操作。</p><p><strong>从流中读取数据</strong></p><p>创建 input.txt 文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. 我的博客地址：www.mrschen.top</span><br><span class="line">创建 main.js 文件, 代码如下：</span><br><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2. var data = &#x27;&#x27;;</span><br><span class="line">3. // 创建可读流</span><br><span class="line">4. var readerStream = fs.createReadStream(&#x27;input.txt&#x27;);</span><br><span class="line">5. // 设置编码为 utf8。</span><br><span class="line">6. readerStream.setEncoding(&#x27;UTF8&#x27;);</span><br><span class="line">7. // 处理流事件 --&gt; data, end, and error</span><br><span class="line">8. readerStream.on(&#x27;data&#x27;, function(chunk) &#123;</span><br><span class="line">9.  data += chunk;</span><br><span class="line">10. &#125;);</span><br><span class="line">11. readerStream.on(&#x27;end&#x27;,function()&#123;</span><br><span class="line">12.   console.log(data);</span><br><span class="line">13. &#125;);</span><br><span class="line">14. readerStream.on(&#x27;error&#x27;, function(err)&#123;</span><br><span class="line">15.   console.log(err.stack);</span><br><span class="line">16. &#125;);</span><br><span class="line">17. console.log(&quot;程序执行完毕&quot;);</span><br><span class="line">以上代码执行结果如下：</span><br><span class="line">1. 程序执行完毕</span><br><span class="line">2. 我的博客地址：www.mrschen.top</span><br></pre></td></tr></table></figure><p><strong>写入流</strong></p><p>创建 main.js 文件, 代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2. var data = &#x27;我的博客地址：www.mrschen.top&#x27;;</span><br><span class="line"></span><br><span class="line">\3. // 创建一个可以写入的流，写入到文件 output.txt 中</span><br><span class="line"></span><br><span class="line">\4. var writerStream = fs.createWriteStream(&#x27;output.txt&#x27;);</span><br><span class="line"></span><br><span class="line">\5. // 使用 utf8 编码写入数据</span><br><span class="line"></span><br><span class="line">\6. writerStream.write(data,&#x27;UTF8&#x27;);</span><br><span class="line"></span><br><span class="line">7. // 标记文件末尾</span><br><span class="line">8. writerStream.end();</span><br><span class="line">9. // 处理流事件 --&gt; data, end, and error</span><br><span class="line">10. writerStream.on(&#x27;finish&#x27;, function() &#123;</span><br><span class="line">11. console.log(&quot;写入完成。&quot;);</span><br><span class="line">12. &#125;);</span><br><span class="line">13. writerStream.on(&#x27;error&#x27;, function(err)&#123;</span><br><span class="line">14.   console.log(err.stack);</span><br><span class="line">15. &#125;);</span><br><span class="line">16. console.log(&quot;程序执行完毕&quot;);</span><br><span class="line">以上程序会将 data 变量的数据写入到 output.txt 文件中。代码执行结果如下：</span><br><span class="line">1. $ node main.js 程序执行完毕写入完成。</span><br></pre></td></tr></table></figure><p>查看 output.txt 文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ cat output.txt 我的博客地址：www.mrschen.top</span><br></pre></td></tr></table></figure><p><strong>管道流</strong></p><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p><p><img src="C:\Users\86133\Pictures\node12.jpg" alt="img"></p><p>如上面的图片所示，我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢的实现了大文件的复制过程。</p><p>以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。</p><p>设置 input.txt 文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 我的博客地址：www.mrschen.top管道流操作实例</span><br><span class="line">创建 main.js 文件, 代码如下：</span><br><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2. // 创建一个可读流</span><br><span class="line">3. var readerStream = fs.createReadStream(&#x27;input.txt&#x27;);</span><br><span class="line">4. // 创建一个可写流</span><br><span class="line">5. var writerStream = fs.createWriteStream(&#x27;output.txt&#x27;);</span><br><span class="line">6. // 管道读写操作</span><br><span class="line">7. // 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span><br><span class="line">8. readerStream.pipe(writerStream);</span><br><span class="line">9. console.log(&quot;程序执行完毕&quot;);</span><br><span class="line">代码执行结果如下：</span><br><span class="line">1. $ node main.js 程序执行完毕</span><br><span class="line">查看 output.txt 文件的内容：</span><br><span class="line">1. $ cat output.txt 我的博客地址：www.mrschen.top管道流操作实例</span><br></pre></td></tr></table></figure><p><strong>链式流</strong></p><p>链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作。</p><p>接下来我们就是用管道和链式来压缩和解压文件。</p><p>创建 compress.js 文件, 代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2. var zlib = require(&#x27;zlib&#x27;);</span><br><span class="line">3. // 压缩 input.txt 文件为 input.txt.gz</span><br><span class="line">4. fs.createReadStream(&#x27;input.txt&#x27;)</span><br><span class="line">5.  .pipe(zlib.createGzip())</span><br><span class="line">6.  .pipe(fs.createWriteStream(&#x27;input.txt.gz&#x27;));</span><br><span class="line">7.  </span><br><span class="line">8. console.log(&quot;文件压缩完成。&quot;);</span><br><span class="line">代码执行结果如下：</span><br><span class="line">1. $ node compress.js 文件压缩完成。</span><br><span class="line">执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。</span><br><span class="line">接下来，让我们来解压该文件，创建 decompress.js 文件，代码如下：</span><br><span class="line">1. var fs = require(&quot;fs&quot;);</span><br><span class="line">2. var zlib = require(&#x27;zlib&#x27;);</span><br><span class="line">3. // 解压 input.txt.gz 文件为 input.txt</span><br><span class="line">4. fs.createReadStream(&#x27;input.txt.gz&#x27;)</span><br><span class="line">5.  .pipe(zlib.createGunzip())</span><br><span class="line">6.  .pipe(fs.createWriteStream(&#x27;input.txt&#x27;));</span><br><span class="line">7.  </span><br><span class="line">8. console.log(&quot;文件解压完成。&quot;);</span><br><span class="line">代码执行结果如下：</span><br><span class="line">\1. $ node decompress.js 文件解压完成。</span><br></pre></td></tr></table></figure><p><strong>Node.js</strong> <strong>模块系统</strong></p><p><strong>Node.js**</strong>模块系统**</p><p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。</p><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。</p><p><strong>创建模块</strong></p><p>在 Node.js 中，创建一个模块非常简单，如下我们创建一个 <strong>main.js</strong> 文件，代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. var hello = require(&#x27;./hello&#x27;);</span><br><span class="line">2. hello.world();</span><br></pre></td></tr></table></figure><p>以上实例中，代码 require(‘./hello’) 引入了当前目录下的 hello.js 文件（./ 为当前目录，node.js 默认后缀为 js）。</p><p>Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。</p><p>接下来我们就来创建 hello.js 文件，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. exports.world = function() &#123;</span><br><span class="line">2.  console.log(&#x27;Hello World&#x27;);</span><br><span class="line">3. &#125;</span><br></pre></td></tr></table></figure><p>在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require(‘./hello’) 加载这个模块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。</p><p>有时候我们只是想把一个对象封装到模块中，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. module.exports = function() &#123;</span><br><span class="line">2.  // ...</span><br><span class="line">例如:</span><br><span class="line">1. //hello.js</span><br><span class="line">2. function Hello() &#123; </span><br><span class="line">3.   var name; </span><br><span class="line">4.   this.setName = function(thyName) &#123; </span><br><span class="line">5.     name = thyName; </span><br><span class="line">6.   &#125;; </span><br><span class="line">7.   this.sayHello = function() &#123; </span><br><span class="line">8.     console.log(&#x27;Hello &#x27; + name); </span><br><span class="line">9.   &#125;; </span><br><span class="line">10. &#125;; </span><br><span class="line">11. module.exports = Hello;</span><br><span class="line">这样就可以直接获得这个对象了：</span><br><span class="line">1. //main.js </span><br><span class="line">2. var Hello = require(&#x27;./hello&#x27;); </span><br><span class="line">3. hello = new Hello(); </span><br><span class="line">4. hello.setName(&#x27;BYVoid&#x27;); </span><br><span class="line">5. hello.sayHello();</span><br></pre></td></tr></table></figure><p>模块接口的唯一变化是使用 module.exports = Hello 代替了exports.world = function(){}。 在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的 exports。</p><p><strong>服务端的模块放在哪里</strong></p><p>也许你已经注意到，我们已经在代码中使用了模块了。像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&quot;http&quot;);</span><br><span class="line">2. ...</span><br><span class="line">3. http.createServer(...);</span><br></pre></td></tr></table></figure><p>Node.js 中自带了一个叫做 <strong>http</strong> 的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。</p><p>这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。</p><p>Node.js 的 require 方法中的文件查找策略如下：</p><p>由于 Node.js 中存在 4 类模块（原生模块和3种文件模块），尽管 require 方法极其简单，但是内部的加载却是十分复杂的，其加载优先级也各自不同。如下图所示：</p><p><img src="C:\Users\86133\Pictures\node13.jpg" alt="img"></p><p><strong>从文件模块缓存中加载</strong></p><p>尽管原生模块与文件模块的优先级不同，但是都会优先从文件模块的缓存中加载已经存在的模块。</p><p><strong>从原生模块加载</strong></p><p>原生模块的优先级仅次于文件模块缓存的优先级。require 方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个 http/http.js/http.node/http.json 文件，require(“http”) 都不会从这些文件中加载，而是从原生模块中加载。</p><p>原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。</p><p><strong>从文件加载</strong></p><p>当文件模块缓存中不存在，而且不是原生模块的时候，Node.js 会解析 require 方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。</p><p>require方法接受以下几种参数的传递：</p><ul><li>http、fs、path等，原生模块。</li><li>./mod或../mod，相对路径的文件模块。</li><li>/pathtomodule/mod，绝对路径的文件模块。</li><li>mod，非原生模块的文件模块。</li></ul><p>在路径 Y 下执行 require(X) 语句执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">\1. 1. 如果 X 是内置模块</span><br><span class="line">2.   a. 返回内置模块</span><br><span class="line">3.   b. 停止执行</span><br><span class="line">4. 2. 如果 X 以 &#x27;/&#x27; 开头</span><br><span class="line">5.   a. 设置 Y 为文件根路径</span><br><span class="line">6. 3. 如果 X 以 &#x27;./&#x27; 或 &#x27;/&#x27; or &#x27;../&#x27; 开头</span><br><span class="line">7.   a. LOAD_AS_FILE(Y + X)</span><br><span class="line">8.   b. LOAD_AS_DIRECTORY(Y + X)</span><br><span class="line">9. 4. LOAD_NODE_MODULES(X, dirname(Y))</span><br><span class="line">10. 5. 抛出异常 &quot;not found&quot;</span><br><span class="line">11. LOAD_AS_FILE(X)</span><br><span class="line">12. 1. 如果 X 是一个文件, 将 X 作为 JavaScript 文本载入并停止执行。</span><br><span class="line">13. 2. 如果 X.js 是一个文件, 将 X.js 作为 JavaScript 文本载入并停止执行。</span><br><span class="line">14. 3. 如果 X.json 是一个文件, 解析 X.json 为 JavaScript 对象并停止执行。</span><br><span class="line">15. 4. 如果 X.node 是一个文件, 将 X.node 作为二进制插件载入并停止执行。</span><br><span class="line">16. LOAD_INDEX(X)</span><br><span class="line">17. 1. 如果 X/index.js 是一个文件, 将 X/index.js 作为 JavaScript 文本载入并停止执行。</span><br><span class="line">18. 2. 如果 X/index.json 是一个文件, 解析 X/index.json 为 JavaScript 对象并停止执行。</span><br><span class="line">19. 3. 如果 X/index.node 是一个文件, 将 X/index.node 作为二进制插件载入并停止执行。</span><br><span class="line">20. LOAD_AS_DIRECTORY(X)</span><br><span class="line">21. 1. 如果 X/package.json 是一个文件,</span><br><span class="line">22.   a. 解析 X/package.json, 并查找 &quot;main&quot; 字段。</span><br><span class="line">23.   b. let M = X + (json main 字段)</span><br><span class="line">24.   c. LOAD_AS_FILE(M)</span><br><span class="line">25.   d. LOAD_INDEX(M)</span><br><span class="line">26. 2. LOAD_INDEX(X)</span><br><span class="line">27. LOAD_NODE_MODULES(X, START)</span><br><span class="line">28. 1. let DIRS=NODE_MODULES_PATHS(START)</span><br><span class="line">29. 2. for each DIR in DIRS:</span><br><span class="line">30.   a. LOAD_AS_FILE(DIR/X)</span><br><span class="line">31.   b. LOAD_AS_DIRECTORY(DIR/X)</span><br><span class="line">32. NODE_MODULES_PATHS(START)</span><br><span class="line">33. 1. let PARTS = path split(START)</span><br><span class="line">34. 2. let I = count of PARTS - 1</span><br><span class="line">35. 3. let DIRS = []</span><br><span class="line">36. 4. while I &gt;= 0,</span><br><span class="line">37.   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE</span><br><span class="line">38.   b. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)</span><br><span class="line">39.   c. DIRS = DIRS + DIR</span><br><span class="line">40.   d. let I = I - 1</span><br><span class="line">41. 5. return DIRS</span><br></pre></td></tr></table></figure><p><strong>exports</strong> <strong>和 module.exports 的使用</strong></p><p>如果要对外暴露属性或方法，就用 <strong>exports</strong> 就行，要暴露对象(类似class，包含了很多属性和方法)，就用 <strong>module.exports</strong>。</p><p><strong>Node.js</strong> <strong>函数</strong></p><p><strong>Node.js</strong> <strong>函数</strong></p><p>在JavaScript中，一个函数可以作为另一个函数的参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p><p>Node.js中函数的使用与Javascript类似，举例来说，你可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. function say(word) &#123;</span><br><span class="line">2.  console.log(word);</span><br><span class="line">3. &#125;</span><br><span class="line">4. function execute(someFunction, value) &#123;</span><br><span class="line">5.  someFunction(value);</span><br><span class="line">6. &#125;</span><br><span class="line">7. execute(say, &quot;Hello&quot;);</span><br></pre></td></tr></table></figure><p>以上代码中，我们把 say 函数作为execute函数的第一个变量进行了传递。这里传递的不是 say 的返回值，而是 say 本身！</p><p>这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。</p><p>当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。</p><p><strong>匿名函数</strong></p><p>我们可以把一个函数作为变量传递。但是我们不一定要绕这个”先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. function execute(someFunction, value) &#123;</span><br><span class="line">2.  someFunction(value);</span><br><span class="line">3. &#125;</span><br><span class="line">4. execute(function(word)&#123; console.log(word) &#125;, &quot;Hello&quot;);</span><br></pre></td></tr></table></figure><p>我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。</p><p>用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做匿名函数 。</p><p><strong>函数传递是如何让HTTP服务器工作的</strong></p><p>带着这些知识，我们再来看看我们简约而不简单的HTTP服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&quot;http&quot;);</span><br><span class="line">2. http.createServer(function(request, response) &#123;</span><br><span class="line">3.  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">4.  response.write(&quot;Hello World&quot;);</span><br><span class="line">5.  response.end();</span><br><span class="line">6. &#125;).listen(8888);</span><br></pre></td></tr></table></figure><p>现在它看上去应该清晰了很多：我们向 createServer 函数传递了一个匿名函数。</p><p>用这样的代码也可以达到同样的目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&quot;http&quot;);</span><br><span class="line">2. function onRequest(request, response) &#123;</span><br><span class="line">3.  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">4.  response.write(&quot;Hello World&quot;);</span><br><span class="line">5.  response.end();</span><br><span class="line">6. &#125;</span><br><span class="line">7. http.createServer(onRequest).listen(8888);</span><br></pre></td></tr></table></figure><p><strong>Node.js</strong> <strong>路由</strong></p><p><strong>Node.js</strong> <strong>路由</strong></p><p>我们要为路由提供请求的 URL 和其他需要的 GET 及 POST 参数，随后路由需要根据这些数据来执行相应的代码。</p><p>因此，我们需要查看 HTTP 请求，从中提取出请求的 URL 以及 GET/POST 参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的 HTTP 服务器的功能。</p><p>我们需要的所有数据都会包含在 request 对象中，该对象作为 onRequest() 回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的 Node.JS 模块，它们分别是 url 和 querystring 模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.    url.parse(string).query</span><br><span class="line">2.                       |</span><br><span class="line">3.       url.parse(string).pathname   |</span><br><span class="line">4.             |          |</span><br><span class="line">5.             |          |</span><br><span class="line">6.            ------ -------------------</span><br><span class="line">7. http://localhost:8888/start?foo=bar&amp;hello=world</span><br><span class="line">8.                 ---    -----</span><br><span class="line">9.                  |     |</span><br><span class="line">10.                  |     |</span><br><span class="line">11.        querystring.parse(queryString)[&quot;foo&quot;]  |</span><br><span class="line">12.                       |</span><br><span class="line">13.              querystring.parse(queryString)[&quot;hello&quot;]</span><br></pre></td></tr></table></figure><p>当然我们也可以用 querystring 模块来解析 POST 请求体中的参数，稍后会有演示。</p><p>现在我们来给 onRequest() 函数加上一些逻辑，用来找出浏览器请求的 URL 路径：</p><p><strong>server.js</strong> <strong>文件代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&quot;http&quot;);</span><br><span class="line">2. var url = require(&quot;url&quot;);</span><br><span class="line">3. function start() &#123;</span><br><span class="line">4.  function onRequest(request, response) &#123;</span><br><span class="line">5.   var pathname = url.parse(request.url).pathname;</span><br><span class="line">6.   console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line">7.   response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">8.   response.write(&quot;Hello World&quot;);</span><br><span class="line">9.   response.end();</span><br><span class="line">10.  &#125;</span><br><span class="line">11.  http.createServer(onRequest).listen(8888);</span><br><span class="line">12.  console.log(&quot;Server has started.&quot;);</span><br><span class="line">13. &#125;</span><br><span class="line">14. exports.start = start;</span><br></pre></td></tr></table></figure><p>好了，我们的应用现在可以通过请求的 URL 路径来区别不同请求了 – 这使我们得以使用路由（还未完成）来将请求以 URL 路径为基准映射到处理程序上。</p><p>在我们所要构建的应用中，这意味着来自 /start 和 /upload 的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。</p><p>现在我们可以来编写路由了，建立一个名为 <strong>router.js</strong> 的文件，添加以下内容：</p><p><strong>router.js</strong> <strong>文件代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. function route(pathname) &#123;</span><br><span class="line">2.  console.log(&quot;About to route a request for &quot; + pathname);</span><br><span class="line">3. &#125;</span><br><span class="line">4. exports.route = route;</span><br></pre></td></tr></table></figure><p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。</p><p>我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块。</p><p>首先，我们来扩展一下服务器的 start() 函数，以便将路由函数作为参数传递过去，<strong>server.js</strong> 文件代码如下</p><p><strong>server.js</strong> <strong>文件代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&quot;http&quot;);</span><br><span class="line">2. var url = require(&quot;url&quot;);</span><br><span class="line">3. function start(route) &#123;</span><br><span class="line">4.  function onRequest(request, response) &#123;</span><br><span class="line">5.   var pathname = url.parse(request.url).pathname;</span><br><span class="line">6.   console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line">7.   route(pathname);</span><br><span class="line">8.   response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line">9.   response.write(&quot;Hello World&quot;);</span><br><span class="line">10.   response.end();</span><br><span class="line">11.  &#125;</span><br><span class="line">12.  http.createServer(onRequest).listen(8888);</span><br><span class="line">13.  console.log(&quot;Server has started.&quot;);</span><br><span class="line">14. &#125;</span><br><span class="line">15. exports.start = start;</span><br></pre></td></tr></table></figure><p>同时，我们会相应扩展 index.js，使得路由函数可以被注入到服务器中：</p><p><strong>index.js</strong> <strong>文件代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. var server = require(&quot;./server&quot;);</span><br><span class="line">2. var router = require(&quot;./router&quot;);</span><br><span class="line">3. server.start(router.route);</span><br></pre></td></tr></table></figure><p>在这里，我们传递的函数依旧什么也没做。</p><p>如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个 URL，你将会看到应用输出相应的信息，这表明我们的 HTTP 服务器已经在使用路由模块了，并会将请求的路径传递给路由：</p><p>\1. $ node index.jsServer has started.</p><p>以上输出已经去掉了比较烦人的 /favicon.ico 请求相关的部分。</p><p>浏览器访问 <a href="http://127.0.0.1:8888/，输出结果如下：">http://127.0.0.1:8888/，输出结果如下：</a></p><p><img src="C:\Users\86133\Pictures\node14.jpg" alt="img"></p><p><strong>Node.js</strong> <strong>常用工具</strong></p><p><strong>Node.js</strong> <strong>常用工具</strong></p><p>util 是一个 Node.js 核心模块，提供常用函数的集合，用于弥补核心 JavaScript 的功能 过于精简的不足。</p><p><strong>util.inherits</strong></p><p>util.inherits(constructor, superConstructor) 是一个实现对象间原型继承的函数。</p><p>JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有提供对象继承的语言级别特性，而是通过原型复制来实现的。</p><p>在这里我们只介绍 util.inherits 的用法，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. var util = require(&#x27;util&#x27;);</span><br><span class="line">2. function Base() &#123;</span><br><span class="line">3.   this.name = &#x27;base&#x27;;</span><br><span class="line">4.   this.base = 1991;</span><br><span class="line">5.   this.sayHello = function() &#123;</span><br><span class="line">6.   console.log(&#x27;Hello &#x27; + this.name);</span><br><span class="line">7.   &#125;;</span><br><span class="line">8. &#125;</span><br><span class="line">9. Base.prototype.showName = function() &#123;</span><br><span class="line">10.   console.log(this.name);</span><br><span class="line">11. &#125;;</span><br><span class="line">12. function Sub() &#123;</span><br><span class="line">13.   this.name = &#x27;sub&#x27;;</span><br><span class="line">14. &#125;</span><br><span class="line">15. util.inherits(Sub, Base);</span><br><span class="line">16. var objBase = new Base();</span><br><span class="line">17. objBase.showName();</span><br><span class="line">18. objBase.sayHello();</span><br><span class="line">19. console.log(objBase);</span><br><span class="line">20. var objSub = new Sub();</span><br><span class="line">21. objSub.showName();</span><br><span class="line">22. //objSub.sayHello();</span><br><span class="line">23. console.log(objSub);</span><br></pre></td></tr></table></figure><p>我们定义了一个基础对象 Base 和一个继承自 Base 的 Sub，Base 有三个在构造函数内定义的属性和一个原型中定义的函数，通过 util.inherits 实现继承。运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. base</span><br><span class="line">2. Hello base</span><br><span class="line">3. &#123; name: &#x27;base&#x27;, base: 1991, sayHello: [Function] &#125;</span><br><span class="line">4. sub</span><br><span class="line">5. &#123; name: &#x27;sub&#x27; &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>Sub 仅仅继承了 Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。</p><p>同时，在原型中定义的属性不会被 console.log 作 为对象的属性输出。如果我们去掉 objSub.sayHello(); 这行的注释，将会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. node.js:201throw e; // process.nextTick error, or &#x27;error&#x27; event on first tick^TypeError: Object #&lt;Sub&gt; has no method &#x27;sayHello&#x27;at Object.&lt;anonymous&gt; (/home/byvoid/utilinherits.js:29:8)at Module._compile (module.js:441:26)at Object..js (module.js:459:10)at Module.load (module.js:348:31)at Function._load (module.js:308:12)at Array.0 (module.js:479:10)at EventEmitter._tickCallback (node.js:192:40)node.js:201</span><br><span class="line">2. throw e; // process.nextTick error, or &#x27;error&#x27; event on first tick</span><br><span class="line">3. ^</span><br><span class="line">4. TypeError: Object #&lt;Sub&gt; has no method &#x27;sayHello&#x27;</span><br><span class="line">5. at Object.&lt;anonymous&gt; (/home/byvoid/utilinherits.js:29:8)</span><br><span class="line">6. at Module._compile (module.js:441:26)</span><br><span class="line">7. at Object..js (module.js:459:10)</span><br><span class="line">8. at Module.load (module.js:348:31)</span><br><span class="line">9. at Function._load (module.js:308:12)</span><br><span class="line">10. at Array.0 (module.js:479:10)</span><br><span class="line">11. at EventEmitter._tickCallback (node.js:192:40)</span><br></pre></td></tr></table></figure><p><strong>util.inspect</strong></p><p>util.inspect(object,[showHidden],[depth],[colors]) 是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。</p><p>showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。</p><p>depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定 depth，默认会递归 2 层，指定为 null 表示将不限递归层数完整遍历对象。 如果 color 值为 true，输出格式将会以 ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。</p><p>特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了 toString 方法也不会调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. var util = require(&#x27;util&#x27;);</span><br><span class="line">2. function Person() &#123;</span><br><span class="line">3.   this.name = &#x27;byvoid&#x27;;</span><br><span class="line">4.   this.toString = function() &#123;</span><br><span class="line">5.   return this.name;</span><br><span class="line">6.   &#125;;</span><br><span class="line">7. &#125;</span><br><span class="line">8. var obj = new Person();</span><br><span class="line">9. console.log(util.inspect(obj));</span><br><span class="line">10. console.log(util.inspect(obj, true));</span><br></pre></td></tr></table></figure><p>运行结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. Person &#123; name: &#x27;byvoid&#x27;, toString: [Function] &#125;</span><br><span class="line">2. Person &#123;</span><br><span class="line">3.  name: &#x27;byvoid&#x27;,</span><br><span class="line">4.  toString:</span><br><span class="line">5.   &#123; [Function]</span><br><span class="line">6.    [length]: 0,</span><br><span class="line">7.    [name]: &#x27;&#x27;,</span><br><span class="line">8.    [arguments]: null,</span><br><span class="line">9.    [caller]: null,</span><br><span class="line">10.    [prototype]: &#123; [constructor]: [Circular] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>util.isArray(object)</strong></p><p>如果给定的参数 “object” 是一个数组返回 true，否则返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. var util = require(&#x27;util&#x27;);</span><br><span class="line">2. util.isArray([])</span><br><span class="line">3.  // true</span><br><span class="line">4. util.isArray(new Array)</span><br><span class="line">5.  // true</span><br><span class="line">6. util.isArray(&#123;&#125;)</span><br><span class="line">7.  // false</span><br></pre></td></tr></table></figure><p><strong>util.isRegExp(object)</strong></p><p>如果给定的参数 “object” 是一个正则表达式返回 true，否则返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. var util = require(&#x27;util&#x27;);</span><br><span class="line">2. util.isRegExp(/some regexp/)</span><br><span class="line">3.  // true</span><br><span class="line">4. util.isRegExp(new RegExp(&#x27;another regexp&#x27;))</span><br><span class="line">5.  // true</span><br><span class="line">6. util.isRegExp(&#123;&#125;)</span><br><span class="line">7.  // false</span><br></pre></td></tr></table></figure><p><strong>util.isDate(object)</strong></p><p>如果给定的参数 “object” 是一个日期返回 true，否则返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. var util = require(&#x27;util&#x27;);</span><br><span class="line">2. util.isDate(new Date())</span><br><span class="line">3.  // true</span><br><span class="line">4. util.isDate(Date())</span><br><span class="line">5.  // false (without &#x27;new&#x27; returns a String)</span><br><span class="line">6. util.isDate(&#123;&#125;)</span><br><span class="line">7.  // false</span><br></pre></td></tr></table></figure><p><strong>util.isError(object)</strong></p><p>如果给定的参数 “object” 是一个错误对象返回 true，否则返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. var util = require(&#x27;util&#x27;);</span><br><span class="line">2. util.isError(new Error())</span><br><span class="line">3.  // true</span><br><span class="line">4. util.isError(new TypeError())</span><br><span class="line">5.  // true</span><br><span class="line">6. util.isError(&#123; name: &#x27;Error&#x27;, message: &#x27;an error occurred&#x27; &#125;)</span><br><span class="line">7.  // false</span><br></pre></td></tr></table></figure><p><strong>Node.js</strong> <strong>工具模块</strong></p><p><strong>Node.js</strong> <strong>工具模块</strong></p><p>在 Node.js 模块库中有很多好用的模块。接下来我们为大家介绍几种常用模块的使用：</p><div class="table-container"><table><thead><tr><th><strong>序号</strong></th><th><strong>模块名 &amp; 描述</strong></th></tr></thead><tbody><tr><td>1</td><td>OS 模块 提供基本的系统操作函数。</td></tr><tr><td>2</td><td>Path 模块 提供了处理和转换文件路径的工具。</td></tr><tr><td>3</td><td>Net 模块 用于底层的网络通信。提供了服务端和客户端的的操作。</td></tr><tr><td>4</td><td>DNS 模块 用于解析域名。</td></tr><tr><td>5</td><td>Domain 模块 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。</td></tr></tbody></table></div><p><strong>Node.js Web</strong> <strong>模块</strong></p><p><strong>什么是 Web 服务器？</strong></p><p>Web 服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，Web 服务器的基本功能就是提供 Web 信息浏览服务。它只需支持 HTTP 协议、HTML 文档格式及 URL，与客户端的网络浏览器配合。</p><p>大多数 web 服务器都支持服务端的脚本语言（php、python、ruby）等，并通过脚本语言从数据库获取数据，将结果返回给客户端浏览器。</p><p>目前最主流的三个 Web 服务器是 Apache、Nginx、IIS。</p><p><strong>Web</strong> <strong>应用架构</strong></p><p><img src="C:\Users\86133\Pictures\node15.jpg" alt="Web 应用架构"></p><ul><li><strong>Client</strong> - 客户端，一般指浏览器，浏览器可以通过 HTTP 协议向服务器请求数据。</li><li><strong>Server</strong> - 服务端，一般指 Web 服务器，可以接收客户端请求，并向客户端发送响应数据。</li><li><strong>Business</strong> - 业务层， 通过 Web 服务器处理应用程序，如与数据库交互，逻辑运算，调用外部程序等。</li><li><strong>Data</strong> - 数据层，一般由数据库组成。</li></ul><p><strong>使用 Node 创建 Web 服务器</strong></p><p>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&#x27;http&#x27;);</span><br></pre></td></tr></table></figure><p>以下是演示一个最基本的 HTTP 服务器架构（使用 8080 端口），创建 server.js 文件，代码如下所示：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&#x27;http&#x27;);</span><br><span class="line">2. var fs = require(&#x27;fs&#x27;);</span><br><span class="line">3. var url = require(&#x27;url&#x27;);</span><br><span class="line">4. // 创建服务器</span><br><span class="line">5. http.createServer( function (request, response) &#123;</span><br><span class="line">6.   // 解析请求，包括文件名</span><br><span class="line">7.   var pathname = url.parse(request.url).pathname;</span><br><span class="line">8.   // 输出请求的文件名</span><br><span class="line">9.   console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line">10.   // 从文件系统中读取请求的文件内容</span><br><span class="line">11.   fs.readFile(pathname.substr(1), function (err, data) &#123;</span><br><span class="line">12.    if (err) &#123;</span><br><span class="line">13.      console.log(err);</span><br><span class="line">14.      // HTTP 状态码: 404 : NOT FOUND</span><br><span class="line">15.      // Content Type: text/html</span><br><span class="line">16.      response.writeHead(404, &#123;&#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;);</span><br><span class="line">17.    &#125;else&#123;</span><br><span class="line">18.      // HTTP 状态码: 200 : OK</span><br><span class="line">19.      // Content Type: text/html</span><br><span class="line">20.      response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;);</span><br><span class="line">21.      // 响应文件内容</span><br><span class="line">22.      response.write(data.toString());</span><br><span class="line">23.    &#125;</span><br><span class="line">24.    // 发送响应数据</span><br><span class="line">25.    response.end();</span><br><span class="line">26.   &#125;);</span><br><span class="line">27. &#125;).listen(8080);</span><br><span class="line">28. // 控制台会输出以下信息</span><br><span class="line">29. console.log(&#x27;Server running at http://127.0.0.1:8080/&#x27;);</span><br></pre></td></tr></table></figure><p>接下来我们在该目录下创建一个 index.html 文件，代码如下：</p><p><strong>index.html</strong> <strong>文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;!DOCTYPE html&gt;</span><br><span class="line">2. &lt;html&gt;</span><br><span class="line">3. &lt;head&gt;</span><br><span class="line">4. &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">5. &lt;title&gt;node&lt;/title&gt;</span><br><span class="line">6. &lt;/head&gt;</span><br><span class="line">7. &lt;body&gt;</span><br><span class="line">8.   &lt;h1&gt;我的第一个标题&lt;/h1&gt;</span><br><span class="line">9.   &lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">10. &lt;/body&gt;</span><br><span class="line">11. &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>执行 server.js 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node server.jsServer running at http://127.0.0.1:8080/</span><br></pre></td></tr></table></figure><p>接着我们在浏览器中打开地址：<a href="http://127.0.0.1:8080/index.html"><strong>http://127.0.0.1:8080/index.html</strong></a>，显示如下图所示：</p><p><img src="C:\Users\86133\Pictures\node16.jpg" alt="img"></p><p>执行 server.js 的控制台输出信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Server running at http://127.0.0.1:8080/</span><br><span class="line">2. Request for /index.html received.   # 客户端请求信息</span><br></pre></td></tr></table></figure><p><strong>使用 Node 创建 Web 客户端</strong></p><p>Node 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：</p><p><strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. var http = require(&#x27;http&#x27;);</span><br><span class="line">2. // 用于请求的选项</span><br><span class="line">3. var options = &#123;</span><br><span class="line">4.   host: &#x27;localhost&#x27;,</span><br><span class="line">5.   port: &#x27;8080&#x27;,</span><br><span class="line">6.   path: &#x27;/index.html&#x27;</span><br><span class="line">7. &#125;;</span><br><span class="line">8. // 处理响应的回调函数</span><br><span class="line">9. var callback = function(response)&#123;</span><br><span class="line">10.   // 不断更新数据</span><br><span class="line">11.   var body = &#x27;&#x27;;</span><br><span class="line">12.   response.on(&#x27;data&#x27;, function(data) &#123;</span><br><span class="line">13.    body += data;</span><br><span class="line">14.   &#125;);</span><br><span class="line">15.   response.on(&#x27;end&#x27;, function() &#123;</span><br><span class="line">16.    // 数据接收完成</span><br><span class="line">17.    console.log(body);</span><br><span class="line">18.   &#125;);</span><br><span class="line">19. &#125;</span><br><span class="line">20. // 向服务端发送请求</span><br><span class="line">21. var req = http.request(options, callback);</span><br><span class="line">22. req.end();</span><br></pre></td></tr></table></figure><p><strong>新开一个终端</strong>，执行 client.js 文件，输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. $ node client.js</span><br><span class="line">2. &lt;!DOCTYPE html&gt;</span><br><span class="line">3. &lt;html&gt;</span><br><span class="line">4. &lt;head&gt;</span><br><span class="line">5. &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">6. &lt;title&gt;node&lt;/title&gt;</span><br><span class="line">7. &lt;/head&gt;</span><br><span class="line">8. &lt;body&gt;</span><br><span class="line">9.   &lt;h1&gt;我的第一个标题&lt;/h1&gt;</span><br><span class="line">10.   &lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">11. &lt;/body&gt;</span><br><span class="line">12. &lt;/html&gt;</span><br><span class="line">执行 server.js 的控制台输出信息如下：</span><br><span class="line">1. Server running at http://127.0.0.1:8080/</span><br><span class="line">2. Request for /index.html received.      # 客户端请求信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Node.js RESTful API</strong></p><p><strong>什么是 REST？</strong></p><p>REST 即表述性状态传递（英文：Representational State Transfer，简称 REST）是 Roy Fielding 博士在 2000 年他的博士论文中提出来的一种软件架构风格。</p><p>表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。需要注意的是，REST 是设计风格而不是标准。REST 通常基于使用 HTTP，URI，和 XML（标准通用标记语言下的一个子集）以及 HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。</p><p><strong>HTTP</strong> <strong>方法</strong></p><p>以下为 REST 基本架构的四个方法：</p><ul><li><strong>GET</strong> - 用于获取数据。</li><li><strong>PUT</strong> - 用于更新或添加数据。</li><li><strong>DELETE</strong> - 用于删除数据。</li><li><strong>POST</strong> - 用于添加数据。</li></ul><p><strong>RESTful Web Services</strong></p><p>Web service 是一个平台独立的，低耦合的，自包含的、基于可编程的 web 的应用程序，可使用开放的 XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。</p><p>基于 REST 架构的 Web Services 即是 RESTful。</p><p>由于轻量级以及通过 HTTP 直接传输数据的特性，Web 服务的 RESTful 方法已经成为最常见的替代方法。可以使用各种语言（比如 Java 程序、Perl、Ruby、Python、PHP 和 Javascript\【包括 Ajax]）实现客户端。</p><p>RESTful Web 服务通常可以通过自动客户端或代表用户的应用程序访问。但是，这种服务的简便性让用户能够与之直接交互，使用它们的 Web 浏览器构建一个 GET URL 并读取返回的内容。</p><p><strong>创建 RESTful</strong></p><p>首先，创建一个 json 数据资源文件 users.json，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. &#123;</span><br><span class="line">2. &quot;user1&quot; : &#123;</span><br><span class="line">3. &quot;name&quot; : &quot;mahesh&quot;,</span><br><span class="line">4. &quot;password&quot; : &quot;password1&quot;,</span><br><span class="line">5.&quot;profession&quot; : &quot;teacher&quot;,</span><br><span class="line">6. &quot;id&quot;: 1</span><br><span class="line">7.   &#125;,</span><br><span class="line">8.  &quot;user2&quot; : &#123;</span><br><span class="line">9.  &quot;name&quot; : &quot;suresh&quot;,</span><br><span class="line">10. &quot;password&quot; : &quot;password2&quot;,</span><br><span class="line">11. &quot;profession&quot; : &quot;librarian&quot;,</span><br><span class="line">12.  &quot;id&quot;: 2</span><br><span class="line">13.   &#125;,</span><br><span class="line">14.   &quot;user3&quot; : &#123;</span><br><span class="line">15.    &quot;name&quot; : &quot;ramesh&quot;,</span><br><span class="line">16.    &quot;password&quot; : &quot;password3&quot;,</span><br><span class="line">17.    &quot;profession&quot; : &quot;clerk&quot;,</span><br><span class="line">18.    &quot;id&quot;: 3</span><br><span class="line">19.   &#125;</span><br><span class="line">20. &#125;</span><br></pre></td></tr></table></figure><p>基于以上数据，我们创建以下 RESTful API：</p><div class="table-container"><table><thead><tr><th><strong>序号</strong></th><th><strong>URI</strong></th><th><strong>HTTP</strong> <strong>方法</strong></th><th><strong>发送内容</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>1</td><td>listUsers</td><td>GET</td><td>空</td><td>显示所有用户列表</td></tr><tr><td>2</td><td>addUser</td><td>POST</td><td>JSON 字符串</td><td>添加新用户</td></tr><tr><td>3</td><td>deleteUser</td><td>DELETE</td><td>JSON 字符串</td><td>删除用户</td></tr><tr><td>4</td><td>:id</td><td>GET</td><td>空</td><td>显示用户详细信息</td></tr></tbody></table></div><p><strong>获取用户列表：</strong></p><p>以下代码，我们创建了 RESTful API <strong>listUsers</strong>，用于读取用户的信息列表， server.js 文件代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. var express = require(&#x27;express&#x27;);</span><br><span class="line">2. var app = express();</span><br><span class="line">3. var fs = require(&quot;fs&quot;);</span><br><span class="line">4. app.get(&#x27;/listUsers&#x27;, function (req, res) &#123;</span><br><span class="line">5.  fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#x27;utf8&#x27;, function (err, data) &#123;</span><br><span class="line">6.  console.log( data );</span><br><span class="line">7.  res.end( data );</span><br><span class="line">8.   &#125;);</span><br><span class="line">9. &#125;)</span><br><span class="line">10. var server = app.listen(8081, function () &#123;</span><br><span class="line">11.  var host = server.address().address</span><br><span class="line">12.  var port = server.address().port</span><br><span class="line">13.  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line">14. &#125;)</span><br></pre></td></tr></table></figure><p>接下来执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. $ node server.js</span><br><span class="line">2. 应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://127.0.0.1:8081/listUsers，结果如下所示：">http://127.0.0.1:8081/listUsers，结果如下所示：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. &#123;</span><br><span class="line">2.   &quot;user1&quot; : </span><br><span class="line">3.    &quot;name&quot; : &quot;mahesh&quot;,</span><br><span class="line">4.    &quot;password&quot; : &quot;password1&quot;,</span><br><span class="line">5.    &quot;profession&quot; : &quot;teacher&quot;,</span><br><span class="line">6.    &quot;id&quot;: 1</span><br><span class="line">7.   &#125;,</span><br><span class="line">8.   &quot;user2&quot; : &#123;</span><br><span class="line">9.    &quot;name&quot; : &quot;suresh&quot;,</span><br><span class="line">10.    &quot;password&quot; : &quot;password2&quot;,</span><br><span class="line">11.    &quot;profession&quot; : &quot;librarian&quot;,</span><br><span class="line">12.    &quot;id&quot;: 2</span><br><span class="line">13.   &#125;,</span><br><span class="line">14.   &quot;user3&quot; : &#123;</span><br><span class="line">15.    &quot;name&quot; : &quot;ramesh&quot;,</span><br><span class="line">16.    &quot;password&quot; : &quot;password3&quot;,</span><br><span class="line">17.    &quot;profession&quot; : &quot;clerk&quot;,</span><br><span class="line">18.    &quot;id&quot;: 3</span><br><span class="line">19.   &#125;</span><br><span class="line">20. &#125;</span><br></pre></td></tr></table></figure><p><strong>添加用户</strong></p><p>以下代码，我们创建了 RESTful API <strong>addUser</strong>， 用于添加新的用户数据，server.js 文件代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. var express = require(&#x27;express&#x27;);</span><br><span class="line">2. var app = express();</span><br><span class="line">3. var fs = require(&quot;fs&quot;);</span><br><span class="line">4. //添加的新用户数据</span><br><span class="line">5. var user = &#123;</span><br><span class="line">6.   &quot;user4&quot; : &#123;</span><br><span class="line">7.   &quot;name&quot; : &quot;mohit&quot;,</span><br><span class="line">8.   &quot;password&quot; : &quot;password4&quot;,</span><br><span class="line">9.  &quot;profession&quot; : &quot;teacher&quot;,</span><br><span class="line">10.    &quot;id&quot;: 4</span><br><span class="line">11.   &#125;</span><br><span class="line">12. &#125;</span><br><span class="line">13. app.get(&#x27;/addUser&#x27;, function (req, res) &#123;</span><br><span class="line">14.   // 读取已存在的数据</span><br><span class="line">15.   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#x27;utf8&#x27;, function (err, data) &#123;</span><br><span class="line">16.     data = JSON.parse( data );</span><br><span class="line">17.     data[&quot;user4&quot;] = user[&quot;user4&quot;];</span><br><span class="line">18.     console.log( data );</span><br><span class="line">19.     res.end( JSON.stringify(data));</span><br><span class="line">20.   &#125;);</span><br><span class="line">21. &#125;)</span><br><span class="line">22. var server = app.listen(8081, function () &#123;</span><br><span class="line">23.  var host = server.address().address</span><br><span class="line">24.  var port = server.address().port</span><br><span class="line">25.  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line">26. &#125;)</span><br></pre></td></tr></table></figure><p>接下来执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node server.js应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://127.0.0.1:8081/addUser，结果如下所示：">http://127.0.0.1:8081/addUser，结果如下所示：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. &#123; user1:</span><br><span class="line">2.   &#123; name: &#x27;mahesh&#x27;,</span><br><span class="line">3.    password: &#x27;password1&#x27;,</span><br><span class="line">4.    profession: &#x27;teacher&#x27;,</span><br><span class="line">5.    id: 1 &#125;,</span><br><span class="line">6.  user2:</span><br><span class="line">7.   &#123; name: &#x27;suresh&#x27;,</span><br><span class="line">8.    password: &#x27;password2&#x27;,</span><br><span class="line">9.    profession: &#x27;librarian&#x27;,</span><br><span class="line">10.    id: 2 &#125;,</span><br><span class="line">11.  user3:</span><br><span class="line">12.   &#123; name: &#x27;ramesh&#x27;,</span><br><span class="line">13.    password: &#x27;password3&#x27;,</span><br><span class="line">14.    profession: &#x27;clerk&#x27;,</span><br><span class="line">15.    id: 3 &#125;,</span><br><span class="line">16.  user4:</span><br><span class="line">17.   &#123; name: &#x27;mohit&#x27;,</span><br><span class="line">18.    password: &#x27;password4&#x27;,</span><br><span class="line">19.    profession: &#x27;teacher&#x27;,</span><br><span class="line">20.    id: 4 &#125;</span><br><span class="line">21. &#125;</span><br></pre></td></tr></table></figure><p><strong>显示用户详情</strong></p><p>以下代码，我们创建了 RESTful API <strong>:id**</strong>（用户 id）**， 用于读取指定用户的详细信息，server.js 文件代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. var express = require(&#x27;express&#x27;);</span><br><span class="line">2. var app = express();</span><br><span class="line">3. var fs = require(&quot;fs&quot;);</span><br><span class="line">4. app.get(&#x27;/:id&#x27;, function (req, res) &#123;</span><br><span class="line">5.   // 首先我们读取已存在的用户</span><br><span class="line">6.   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#x27;utf8&#x27;, function (err, data) &#123;</span><br><span class="line">7.   data = JSON.parse( data );</span><br><span class="line">8.   var user = data[&quot;user&quot; + req.params.id]9*</span><br><span class="line">9.   console.log( user );</span><br><span class="line">10.   res.end( JSON.stringify(user));</span><br><span class="line">11.   &#125;);</span><br><span class="line">12. &#125;)</span><br><span class="line">13. var server = app.listen(8081, function () &#123;</span><br><span class="line">14.  var host = server.address().address</span><br><span class="line">15.  var port = server.address().port</span><br><span class="line">16.  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line">17. &#125;)</span><br></pre></td></tr></table></figure><p>接下来执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node server.js应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://127.0.0.1:8081/2，结果如下所示：">http://127.0.0.1:8081/2，结果如下所示：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. &#123;</span><br><span class="line">2.   &quot;name&quot;:&quot;suresh&quot;,</span><br><span class="line">3.   &quot;password&quot;:&quot;password2&quot;,</span><br><span class="line">4.   &quot;profession&quot;:&quot;librarian&quot;,</span><br><span class="line">5.   &quot;id&quot;:2</span><br><span class="line">6. &#125;</span><br></pre></td></tr></table></figure><p><strong>删除用户</strong></p><p>以下代码，我们创建了 RESTful API <strong>deleteUser</strong>， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. var express = require(&#x27;express&#x27;);</span><br><span class="line">2. var app = express();</span><br><span class="line">3. var fs = require(&quot;fs&quot;);</span><br><span class="line">4. var id = 2;</span><br><span class="line">5. app.get(&#x27;/deleteUser&#x27;, function (req, res) &#123;</span><br><span class="line">6.  // First read existing users.</span><br><span class="line">7.   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#x27;utf8&#x27;, function (err, data) &#123;</span><br><span class="line">8.   data = JSON.parse( data );</span><br><span class="line">9.   delete data[&quot;user&quot; + id];</span><br><span class="line">10.  console.log( data );</span><br><span class="line">11.   res.end( JSON.stringify(data));</span><br><span class="line">12.   &#125;);</span><br><span class="line">13. &#125;)</span><br><span class="line">14. var server = app.listen(8081, function () &#123;</span><br><span class="line">15.  var host = server.address().address</span><br><span class="line">16.  var port = server.address().port</span><br><span class="line">17.  console.log(&quot;应用实例，访问地址为 http://%s:%s&quot;, host, port)</span><br><span class="line">18. &#125;)</span><br></pre></td></tr></table></figure><p>接下来执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node server.js应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://127.0.0.1:8081/deleteUser，结果如下所示：">http://127.0.0.1:8081/deleteUser，结果如下所示：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. &#123; user1:</span><br><span class="line">2. &#123; name: &#x27;mahesh&#x27;,</span><br><span class="line">3. password: &#x27;password1&#x27;,</span><br><span class="line">4. profession: &#x27;teacher&#x27;,</span><br><span class="line">5. id: 1 &#125;,</span><br><span class="line">6. user3:</span><br><span class="line">7. &#123; name: &#x27;ramesh&#x27;,</span><br><span class="line">8. password: &#x27;password3&#x27;,</span><br><span class="line">9. profession: &#x27;clerk&#x27;,</span><br><span class="line">10. id: 3 &#125;</span><br><span class="line">11. &#125;</span><br></pre></td></tr></table></figure><p><strong>Node.js</strong> <strong>多进程</strong></p><p><strong>Node.js</strong> <strong>多进程</strong></p><p>我们都知道 Node.js 是以单线程的模式运行的，但它使用的是事件驱动来处理并发，这样有助于我们在多核 cpu 的系统上创建多个子进程，从而提高性能。</p><p>每个子进程总是带有三个流对象：child.stdin, child.stdout 和 child.stderr。他们可能会共享父进程的 stdio 流，或者也可以是独立的被导流的流对象。</p><p>Node 提供了 child_process 模块来创建子进程，方法有：</p><ul><li><strong>exec</strong> - child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。</li><li><strong>spawn</strong> - child_process.spawn 使用指定的命令行参数创建新进程。</li><li><strong>fork</strong> - child_process.fork 是 spawn() 的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [’./son.js’])     。与 spawn 方法不同的是，fork 会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。</li></ul><p><strong>exec()</strong> <strong>方法</strong></p><p>child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。</p><p>语法如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. child_process.exec(command[, options], callback)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数说明如下：</p><p><strong>command**</strong>：** 字符串， 将要运行的命令，参数使用空格隔开</p><p><strong>options</strong> <strong>：对象，可以是：</strong></p><ul><li>cwd ，字符串，子进程的当前工作目录</li><li>env，对象 环境变量键值对</li><li>encoding ，字符串，字符编码（默认： ‘utf8’）</li><li>shell ，字符串，将要执行命令的 Shell（默认：在 UNIX 中为/bin/sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 /s /c 在 Windows 中。 在 Windows 中，命令行解析应当能兼容cmd.exe）</li><li>timeout，数字，超时时间（默认： 0）</li><li>maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认：200*1024）</li><li>killSignal ，字符串，结束信号（默认：’SIGTERM’）</li><li>uid，数字，设置用户进程的 ID</li><li>gid，数字，设置进程组的 ID</li></ul><p><strong>callback</strong> <strong>：</strong>回调函数，包含三个参数 error, stdout 和 stderr。</p><p>exec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。</p><p><strong>实例</strong></p><p>让我们创建两个 js 文件 support.js 和 master.js。</p><p><strong>support.js</strong> <strong>文件代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. console.log(&quot;进程 &quot; + process.argv[2] + &quot; 执行。&quot; );</span><br></pre></td></tr></table></figure><p><strong>master.js</strong> <strong>文件代码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. const fs = require(&#x27;fs&#x27;);</span><br><span class="line">2. const child_process = require(&#x27;child_process&#x27;);</span><br><span class="line">3. for(var i=0; i&lt;3; i++) &#123;</span><br><span class="line">4. var workerProcess = child_process.exec(&#x27;node support.js &#x27;+i, function (error, stdout, stderr) &#123;</span><br><span class="line">5. if (error) &#123;</span><br><span class="line">6.console.log(error.stack);</span><br><span class="line">7. console.log(&#x27;Error code: &#x27;+error.code);</span><br><span class="line"></span><br><span class="line">8.console.log(&#x27;Signal received: &#x27;+error.signal);</span><br><span class="line">9.     &#125;</span><br><span class="line">10. console.log(&#x27;stdout: &#x27; + stdout);</span><br><span class="line"></span><br><span class="line">11. console.log(&#x27;stderr: &#x27; + stderr);</span><br><span class="line">12.   &#125;);</span><br><span class="line">13. workerProcess.on(&#x27;exit&#x27;, function (code) &#123;</span><br><span class="line">14. console.log(&#x27;子进程已退出，退出码 &#x27;+code);</span><br><span class="line">15.   &#125;)</span><br><span class="line">16. &#125;</span><br></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. $ node master.js</span><br><span class="line">2. 子进程已退出，退出码 0</span><br><span class="line">3. stdout: 进程 1 执行。</span><br><span class="line">4. stderr:</span><br><span class="line">5. 子进程已退出，退出码 0</span><br><span class="line">6. stdout: 进程 0 执行。</span><br><span class="line">7. stderr:</span><br><span class="line">8. 子进程已退出，退出码 0</span><br><span class="line">9. stdout: 进程 2 执行。</span><br><span class="line">10. stderr:</span><br></pre></td></tr></table></figure><p><strong>spawn()</strong> <strong>方法</strong></p><p>child_process.spawn 使用指定的命令行参数创建新进程，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. child_process.spawn(command[, args][, options])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数说明如下：</p><p><strong>command**</strong>：** 将要运行的命令</p><p><strong>args**</strong>：** Array 字符串参数数组</p><p><strong>options Object</strong></p><ul><li>cwd String 子进程的当前工作目录</li><li>env Object 环境变量键值对</li><li>stdio Array|String 子进程的 stdio 配置</li><li>detached Boolean 这个子进程将会变成进程组的领导</li><li>uid Number 设置用户进程的 ID</li><li>gid Number 设置进程组的 ID</li></ul><p>spawn() 方法返回流 (stdout &amp; stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。</p><p><strong>实例</strong></p><p>让我们创建两个 js 文件 support.js 和 master.js。</p><p><strong>support.js</strong> <strong>文件代码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. console.log(&quot;进程 &quot; + process.argv[2] + &quot; 执行。&quot; );</span><br></pre></td></tr></table></figure><p><strong>master.js</strong> <strong>文件代码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. const fs = require(&#x27;fs&#x27;);</span><br><span class="line">2. const child_process = require(&#x27;child_process&#x27;);</span><br><span class="line">3. for(var i=0; i&lt;3; i++) &#123;</span><br><span class="line">4. var workerProcess = child_process.spawn(&#x27;node&#x27;, [&#x27;support.js&#x27;, i]);</span><br><span class="line">5.workerProcess.stdout.on(&#x27;data&#x27;, function (data) &#123;</span><br><span class="line">6.  console.log(&#x27;stdout: &#x27; + data);</span><br><span class="line">7.   &#125;);</span><br><span class="line">8.   workerProcess.stderr.on(&#x27;data&#x27;, function (data) &#123;</span><br><span class="line">9.    console.log(&#x27;stderr: &#x27; + data);</span><br><span class="line">10.   &#125;);</span><br><span class="line">11.   workerProcess.on(&#x27;close&#x27;, function (code) &#123;</span><br><span class="line">12.    console.log(&#x27;子进程已退出，退出码 &#x27;+code);</span><br><span class="line">13.   &#125;);</span><br><span class="line">14. &#125;</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. $ node master.js stdout: 进程 0 执行。</span><br><span class="line">2. 子进程已退出，退出码 0</span><br><span class="line">3. stdout: 进程 1 执行。</span><br><span class="line">4. 子进程已退出，退出码 0</span><br><span class="line">5. stdout: 进程 2 执行。</span><br><span class="line">6. 子进程已退出，退出码 0</span><br></pre></td></tr></table></figure><p><strong>fork</strong> <strong>方法</strong></p><p>child_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. child_process.fork(modulePath[, args][, options])</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p>参数说明如下：</p><p><strong>modulePath</strong>： String，将要在子进程中运行的模块</p><p><strong>args</strong>： Array 字符串参数数组</p><p><strong>options</strong>：Object</p><ul><li>cwd String 子进程的当前工作目录</li><li>env Object 环境变量键值对</li><li>execPath String 创建子进程的可执行文件</li><li>execArgv Array 子进程的可执行文件的字符串参数数组（默认：     process.execArgv）</li><li>silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）</li><li>uid Number 设置用户进程的 ID</li><li>gid Number 设置进程组的 ID</li></ul><p>返回的对象除了拥有 ChildProcess 实例的所有方法，还有一个内建的通信信道。</p><p><strong>实例</strong></p><p>让我们创建两个 js 文件 support.js 和 master.js。</p><p><strong>support.js</strong> <strong>文件代码</strong>：</p><p>\1. console.log(“进程 “ + process.argv[2] + “ 执行。” );</p><p><strong>master.js</strong> <strong>文件代码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. const fs = require(&#x27;fs&#x27;);</span><br><span class="line">2. const child_process = require(&#x27;child_process&#x27;);</span><br><span class="line">3. for(var i=0; i&lt;3; i++) &#123;</span><br><span class="line">4.   var worker_process = child_process.fork(&quot;support.js&quot;, [i]);</span><br><span class="line">5.   worker_process.on(&#x27;close&#x27;, function (code) &#123;</span><br><span class="line">6.    console.log(&#x27;子进程已退出，退出码 &#x27; + code);</span><br><span class="line">7.   &#125;);</span><br><span class="line">8. &#125;</span><br><span class="line">执行以上代码，输出结果为：</span><br><span class="line">1. $ node master.js</span><br><span class="line">2. 进程 0 执行。</span><br><span class="line">3. 子进程已退出，退出码 0</span><br><span class="line">4. 进程 1 执行。</span><br><span class="line">5. 子进程已退出，退出码 0</span><br><span class="line">6. 进程 2 执行。</span><br><span class="line">7. 子进程已退出，退出码 0</span><br></pre></td></tr></table></figure><p><strong>Node.js JXcore</strong> <strong>打包</strong></p><p><strong>Node.js JXcore</strong> <strong>打包</strong></p><p>Node.js 是一个开放源代码、跨平台的、用于服务器端和网络应用的运行环境。</p><p>JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。</p><p>介绍 JXcore 的打包功能。</p><p><strong>JXcore</strong> <strong>安装</strong></p><p>下载 JXcore 安装包，并解压，在解压的的目录下提供了 jx 二进制文件命令，接下来我们主要使用这个命令。</p><p><strong>步骤</strong> <strong>1**</strong>、下载**</p><p>下载 JXcore 安装包 <a href="https://github.com/jxcore/jxcore-release，你需要根据你自己的系统环境来下载安装包。">https://github.com/jxcore/jxcore-release，你需要根据你自己的系统环境来下载安装包。</a></p><p>1、Window 平台下载：<a href="https://raw.githubusercontent.com/jxcore/jxcore-release/master/0311/jx_win64v8.zip">Download(Windows x64 (V8))</a>。</p><p>2、Linux/OSX 安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ curl https://raw.githubusercontent.com/jxcore/jxcore/master/tools/jx_install.sh | bash</span><br></pre></td></tr></table></figure><p>如果权限不足，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ curl https://raw.githubusercontent.com/jxcore/jxcore/master/tools/jx_install.sh | sudo bash</span><br></pre></td></tr></table></figure><p>以上步骤如果操作正确，使用以下命令，会输出版本号信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ jx --versionv0.10.32</span><br></pre></td></tr></table></figure><p><strong>包代码</strong></p><p>例如，我们的 Node.js 项目包含以下几个文件，其中 index.js 是主文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. drwxr-xr-x 2 root root 4096 Nov 13 12:42 images</span><br><span class="line">2. -rwxr-xr-x 1 root root 30457 Mar 6 12:19 index.htm</span><br><span class="line">3. -rwxr-xr-x 1 root root 30452 Mar 1 12:54 index.js</span><br><span class="line">4. drwxr-xr-x 23 root root 4096 Jan 15 03:48 node_modules</span><br><span class="line">5. drwxr-xr-x 2 root root 4096 Mar 21 06:10 scripts</span><br><span class="line">6. drwxr-xr-x 2 root root 4096 Feb 15 11:56 style</span><br></pre></td></tr></table></figure><p>接下来我们使用 <strong>jx</strong> 命令打包以上项目，并指定 index.js 为 Node.js 项目的主文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ jx package index.js index</span><br></pre></td></tr></table></figure><p>以上命令执行成功，会生成以下两个文件：</p><ul><li><strong>index.jxp</strong> 这是一个中间件文件，包含了需要编译的完整项目信息。</li><li><strong>index.jx</strong> 这是一个完整包信息的二进制文件，可运行在客户端上。</li></ul><p><strong>载入 JX 文件</strong></p><p>Node.js 的项目运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ node index.js command_line_arguments</span><br></pre></td></tr></table></figure><p>使用 JXcore 编译后，我们可以使用以下命令来执行生成的 jx 二进制文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ jx index.jx command_line_arguments</span><br></pre></td></tr></table></figure><p>更多 JXcore 安装参考：<a href="https://github.com/jxcore/jxcore/blob/master/doc/INSTALLATION.md。">https://github.com/jxcore/jxcore/blob/master/doc/INSTALLATION.md。</a></p><p>更多 JXcore 功能特性你可以参考官网：<a href="https://github.com/jxcore/jxcore。">https://github.com/jxcore/jxcore。</a></p><p><strong>Node.js</strong> <strong>连接</strong> <strong>MySQL</strong></p><p><strong>Node.js</strong> <strong>连接 MySQL</strong></p><p>使用 Node.js 来连接 MySQL，并对数据库进行操作。</p><p><strong>安装驱动</strong></p><p>本教程使用了<a href="https://www.axihe.com/edu/nodejs/npm.html#使用淘宝-npm-镜像">淘宝定制的 cnpm 命令</a>进行安装：</p><p>\1. $ cnpm install mysql</p><p><strong>连接数据库</strong></p><p>在以下实例中根据你的实际配置修改数据库用户名、及密码及数据库名：</p><p><strong>test.js</strong> <strong>文件代码</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. var mysql   = require(&#x27;mysql&#x27;);</span><br><span class="line">2. var connection = mysql.createConnection(&#123;</span><br><span class="line">3. host   : &#x27;localhost&#x27;,</span><br><span class="line">4.  user   : &#x27;root&#x27;,</span><br><span class="line">5.  password : &#x27;123456&#x27;,</span><br><span class="line">6.  database : &#x27;test&#x27;</span><br><span class="line">7. &#125;);</span><br><span class="line">8. connection.connect();</span><br><span class="line">9. connection.query(&#x27;SELECT 1 + 1 AS solution&#x27;, function (error, results, fields) &#123;</span><br><span class="line">10.  if (error) throw error;</span><br><span class="line">11.  console.log(&#x27;The solution is: &#x27;, results[0].solution);</span><br><span class="line">12. &#125;);</span><br><span class="line">执行以下命令输出结果为：</span><br><span class="line">1. $ node test.js</span><br><span class="line">2. The solution is: 2</span><br></pre></td></tr></table></figure><p><strong>数据库连接参数说明：</strong></p><div class="table-container"><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>host</td><td>主机地址 （默认：localhost）</td></tr><tr><td>user</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>port</td><td>端口号 （默认：3306）</td></tr><tr><td>database</td><td>数据库名</td></tr><tr><td>charset</td><td>连接字符集（默认：’UTF8_GENERAL_CI’，注意字符集的字母都要大写）</td></tr><tr><td>localAddress</td><td>此 IP 用于 TCP 连接（可选）</td></tr><tr><td>socketPath</td><td>连接到 unix 域路径，当使用 host 和 port 时会被忽略</td></tr><tr><td>timezone</td><td>时区（默认：’local’）</td></tr><tr><td>connectTimeout</td><td>连接超时（默认：不限制；单位：毫秒）</td></tr><tr><td>stringifyObjects</td><td>是否序列化对象</td></tr><tr><td>typeCast</td><td>是否将列值转化为本地  JavaScript 类型值 （默认：true）</td></tr><tr><td>queryFormat</td><td>自定义 query 语句格式化方法</td></tr><tr><td>supportBigNumbers</td><td>数据库支持 bigint 或 decimal 类型列时，需要设此 option 为 true （默认：false）</td></tr><tr><td>bigNumberStrings</td><td>supportBigNumbers 和  bigNumberStrings 启用 强制 bigint 或 decimal 列以 JavaScript 字符串类型返回（默认：false）</td></tr><tr><td>dateStrings</td><td>强制 timestamp,datetime,data  类型以字符串类型返回，而不是 JavaScript Date 类型（默认：false）</td></tr><tr><td>debug</td><td>开启调试（默认：false）</td></tr><tr><td>multipleStatements</td><td>是否许一个 query 中有多个 MySQL 语句 （默认：false）</td></tr><tr><td>flags</td><td>用于修改连接标志</td></tr><tr><td>ssl</td><td>使用 ssl 参数（与 crypto.createCredenitals 参数格式一至）或一个包含 ssl  配置文件名称的字符串，目前只捆绑 Amazon RDS 的配置文件</td></tr></tbody></table></div><p>更多说明可参见：<a href="https://github.com/mysqljs/mysql">https://github.com/mysqljs/mysql</a></p><p><strong>数据库操作 ( CURD )</strong></p><p>在进行数据库操作前，你需要将本站提供的 Websites 表 SQL 文件<a href="https://static.axihe.com/download/websites.sql">websites.sql</a> 导入到你的 MySQL 数据库中。</p><p>测试的 MySQL 用户名为 root，密码为 123456，数据库为 test，你需要根据自己配置情况修改。</p><p><strong>Node.js</strong> <strong>连接</strong> <strong>MongoDB</strong></p><p><strong>Node.js</strong> <strong>连接 MongoDB</strong></p><p>MongoDB 是一种文档导向数据库管理系统，由 C++ 撰写而成。</p><p>如何使用 Node.js 来连接 MongoDB，并对数据库进行操作。</p><p><strong>安装</strong> <strong>cnpm</strong></p><p>本教程使用了<a href="https://www.axihe.com/edu/nodejs/npm.html#使用淘宝-npm-镜像">淘宝定制的 cnpm 命令</a>进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. $ cnpm install mongodb</span><br></pre></td></tr></table></figure><p>接下来我们来实现增删改查功能。</p><p><strong>创建数据库</strong></p><p>要在 MongoDB 中创建一个数据库，首先我们需要创建一个 MongoClient 对象，然后配置好指定的 URL 和 端口号。</p><p>如果数据库不存在，MongoDB 将创建数据库并建立连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. var MongoClient = require(&#x27;mongodb&#x27;).MongoClient;</span><br><span class="line">2. var url = &quot;mongodb://localhost:27017/axihe&quot;;</span><br><span class="line">3. MongoClient.connect(url, &#123; useNewUrlParser: true &#125;, function(err, db) &#123;</span><br><span class="line">4.  if (err) throw err;</span><br><span class="line">5.  console.log(&quot;数据库已创建!&quot;);</span><br><span class="line">6.  db.close();</span><br><span class="line">7. &#125;);</span><br></pre></td></tr></table></figure><p><strong>创建集合</strong></p><p>我们可以使用 createCollection() 方法来创建集合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. var MongoClient = require(&#x27;mongodb&#x27;).MongoClient;</span><br><span class="line">2. var url = &#x27;mongodb://localhost:27017/axihe&#x27;;</span><br><span class="line">3. MongoClient.connect(url, &#123; useNewUrlParser: true &#125;, function (err, db) &#123;</span><br><span class="line">4.   if (err) throw err;</span><br><span class="line">5.   console.log(&#x27;数据库已创建&#x27;);</span><br><span class="line">6.   var dbase = db.db(&quot;axihe&quot;);</span><br><span class="line">7.   dbase.createCollection(&#x27;site&#x27;, function (err, res) &#123;</span><br><span class="line">8.     if (err) throw err;</span><br><span class="line">9.     console.log(&quot;创建集合!&quot;);</span><br><span class="line">10.     db.close();</span><br><span class="line">11.   &#125;);</span><br><span class="line">12. &#125;);</span><br></pre></td></tr></table></figure><p><strong>数据库操作 ( CURD )</strong></p><p>与 MySQL 不同的是 MongoDB 会自动创建数据库和集合，所以使用前我们不需要手动去创建。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"CHEN`Blog","short_name":"CHEN","theme_color":"#49b1f5","background_color":"#49b1f5","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!function(c){var l,h,a,t,i,v='<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',o=(o=document.getElementsByTagName("script"))[o.length-1].getAttribute("data-injectcss"),p=function(c,l){l.parentNode.insertBefore(c,l)};if(o&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(c){console&&console.log(c)}}function d(){i||(i=!0,a())}function m(){try{t.documentElement.doScroll("left")}catch(c){return void setTimeout(m,50)}d()}l=function(){var c,l=document.createElement("div");l.innerHTML=v,v=null,(l=l.getElementsByTagName("svg")[0])&&(l.setAttribute("aria-hidden","true"),l.style.position="absolute",l.style.width=0,l.style.height=0,l.style.overflow="hidden",l=l,(c=document.body).firstChild?p(l,c.firstChild):c.appendChild(l))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(l,0):(h=function(){document.removeEventListener("DOMContentLoaded",h,!1),l()},document.addEventListener("DOMContentLoaded",h,!1)):document.attachEvent&&(a=l,t=c.document,i=!1,m(),t.onreadystatechange=function(){"complete"==t.readyState&&(t.onreadystatechange=null,d())})}(window);]]></content>
      
    </entry>
    
    
  
</search>
